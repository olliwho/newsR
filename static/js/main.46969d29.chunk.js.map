{"version":3,"sources":["template/Loading.tsx","article/ArticleAuthor.tsx","template/Constants.ts","template/IconButton.tsx","article/ArticleDetail.tsx","article/CollapsibleThreadListEntry.tsx","article/CollapsibleThreadList.tsx","article/ThreadDetail.tsx","template/SidebarContent.tsx","author/Author.ts","article/Content.ts","group/GroupCache.ts","article/Article.ts","group/Group.ts","server/Server.ts","localStorage/localStorage.ts","template/ListEntry.tsx","template/List.tsx","template/Header.tsx","template/Footer.tsx","group/GroupDetail.tsx","post/Post.tsx","startPage/StartPage.tsx","serverSelect/ServerSelect.tsx","App.tsx","serviceWorker.ts","index.tsx","logo.svg"],"names":["Loading","className","icon","spin","React","Component","ArticleAuthor","article","this","props","date","format","author","name","queries","small","large","matches","href","email","IconButton","children","query","screenIsSmall","ArticleDetail","state","isContentLoading","contents","attachments","loadContent","prevProps","showContent","setState","text","level","nestContent","onClickHeader","hasSimpleHeader","groupName","onClick","id","subject","e","stopPropagation","to","number","map","content","index","key","citationLevel","length","attachment","dataUrl","download","includes","contentType","src","alt","defaultProps","CollapsibleThreadListEntry","baseUrl","articles","followUps","CollapsibleThreadList","forceHideIds","articleId","splice","indexOf","push","handleArticleClick","ThreadDetail","match","params","Helmet","SidebarContent","sidebar","content1","content2","Author","nameEmail","nameEmailResult","RegExp","exec","Content","isCitationStart","undefined","citationRegex","find","regexp","test","GroupCache","db","cache","Promise","resolve","reject","openRequest","indexedDB","open","onerror","onsuccess","event","result","onupgradeneeded","upgrade","target","overStore","createObjectStore","keyPath","createIndex","unique","bodyStore","server","group","overArticle","transaction","objectStore","storageObj","headers","articleNumber","JSON","stringify","metadata","add","overviewArticles","forEach","persistOverArticle","overArticles","openCursor","IDBKeyRange","only","cursor","value","parse","continue","messageId","body","Article","hasattachment","newsieClient","references","directReference","split","instance","groupCache","retrieveBody","host","persistBody","bodyToContents","stripStartEndCitationsFromContents","post","concat","a","moment","DATE","authorFromString","mimeWordsDecode","FROM","SUBJECT","setReferences","REFERENCES","nextRootIndex","citationIndex","i","isOnlyWhitespace","whitespaceRegex","missingMimeHeader","substring","mimeInfo","join","childNodes","filter","node","TextDecoder","decode","base64","raw","lastIndexOf","replace","line","Group","description","over","overview","persistOverArticles","ArticleFromNewsieArticle","low","high","retrieveOverArticles","articlesByNumber","sort","b","articleIdMap","threads","unix","initialResponse","code","errorMsg","console","error","Error","From","toString","Newsgroups","Subject","packageJson","version","References","send","WsConnection","port","tlsPort","tlsOptions","_socket","_host","_port","_queue","onCloseCallback","connect","async","addEventListener","write","_addSocketHandlers","disconnect","close","h","str","addCallback","callback","onmessage","responseHandler","response","data","shift","err","onclose","WebSocket","process","WsNewsie","options","_wsConnection","socket","sendData","Command","GREETING","command","payload","then","setOnCloseCallback","Newsie","Server","initWsNewsieClient","newsieOptions","isNaN","log","connectAndVerifyNewsieClient","connection","capabilities","LIST","listNewsgroups","newsgroups","ng","prefix","localStorage","getItem","pre","nntpUrl","nntpPortStr","parseInt","keepaliveIntervalReference","getSubscribedGroups","subscribedGroups","getReadArticles","readArticles","ListEntry","entry","history","useHistory","url","onPress","class","bold","title","subtitle","List","Header","searchBar","Logo","Heading","type","placeholder","onChange","toLowerCase","buttons","button","Button","logo","Footer","GroupDetail","loading","groups","subscribedGroupsName","filteredThreads","activeArticle","getGroupByName","articleListData","setItem","addReadArticle","headerWithSearch","headerWithoutSearch","getGroups","isSubscription","curgroup","isGroupSubscribed","path","render","thread","window","location","reload","NoThread","_Post","sending","done","startsWith","replyStr","preventDefault","authorClass","postFollowup","headerText","headerSubtitle","accept-charset","onSubmit","required","currentTarget","readOnly","disabled","goBack","Post","withRouter","StartPage","useState","filterText","setLoading","useEffect","fetchData","changeSubscriptionState","g","unsubscribeGroup","subscribeGroup","groupIcon","serverButton","manageButton","subscriptionButton","allGroupsButton","groupButtons","subscriptionButtons","manageButtons","isGroupFiltered","serverUrl","Start","_ServerSelect","setting","groupPrefix","clear","resetServer","setServer","ServerSelect","App","component","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","library","faChevronDown","faChevronRight","faHandPointRight","faHome","faReply","faSpinner","faPencilAlt","faCog","faList","faGithub","faCheckSquare","faSquare","faQuoteRight","faTools","ReactDOM","basename","document","getElementById","URL","origin","fetch","get","status","ready","unregister","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.46969d29.chunk.js","sourcesContent":["import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\ninterface Props {\n}\n\ninterface State {\n\n}\n\nexport class Loading extends React.Component<Props, State> {\n\n  render() {\n    return (\n      <div className=\"loading-container\">\n        <div className=\"loading\">\n          <FontAwesomeIcon icon=\"spinner\" spin />&nbsp;&nbsp;Loading ...\n        </div>\n      </div>\n    );\n  }\n}\n","import {ArticleInterface} from \"./Article\";\nimport React, { Fragment } from \"react\";\nimport Media from \"react-media\";\nimport {LARGE_SCREEN_QUERY, SMALL_SCREEN_QUERY} from \"../template/Constants\";\n\ninterface Props {\n  article: ArticleInterface\n}\n\ninterface State {\n}\n\nexport class ArticleAuthor extends React.Component<Props, State> {\n  render() {\n    const {article} = this.props;\n    return (\n      <div className=\"article-detail-author\">\n        {article.date.format(\"DD.MM.YYYY HH:mm\")} by {article.author.name}\n        <Media queries={{small: SMALL_SCREEN_QUERY, large: LARGE_SCREEN_QUERY}}>\n          {matches => (\n            <Fragment>\n              {matches.small && <br />}\n              {matches.large && <Fragment>&nbsp;</Fragment>}\n            </Fragment>\n          )}\n        </Media>\n        <a href={`mailto:${article.author.email}`}>{article.author.email}</a>\n      </div>\n    );\n  }\n}\n","export const SMALL_SCREEN_QUERY = \"(max-width: 47rem)\";\nexport const LARGE_SCREEN_QUERY = \"(min-width: 47.1rem)\";\n","import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {IconProp} from \"@fortawesome/fontawesome-svg-core\";\nimport {SMALL_SCREEN_QUERY} from \"./Constants\";\nimport Media from \"react-media\";\n\ninterface Props {\n  icon: IconProp\n}\n\ninterface State {\n}\n\nexport class IconButton extends React.Component<Props, State> {\n\n  render() {\n    const {icon, children} = this.props;\n    return (\n      <Media query={SMALL_SCREEN_QUERY}>\n        {\n          screenIsSmall => screenIsSmall ?\n            < div className=\"icon-button\">\n              <FontAwesomeIcon icon={icon}/>\n            </div> :\n            < div className=\"icon-button\">\n              <FontAwesomeIcon icon={icon}/>&nbsp;&nbsp;{children}\n            </div>\n        }\n      </Media>\n    );\n  }\n}\n","import {ArticleId, ArticleInterface} from \"./Article\";\nimport React, {ReactNode} from \"react\";\nimport {Loading} from \"../template/Loading\";\nimport {Content} from \"./Content\";\nimport {ArticleAuthor} from \"./ArticleAuthor\";\nimport {IconButton} from \"../template/IconButton\";\nimport {Link} from \"react-router-dom\";\nimport {Attachment} from \"./Attachment\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\ninterface Props {\n  article: ArticleInterface;\n  showContent: boolean;\n  onClickHeader: ((id: ArticleId) => void) | null;\n  hasSimpleHeader: boolean;\n  baseUrl: string;\n  groupName: string;\n}\n\nconst defaultProps: Partial<Props> = {\n  onClickHeader: null,\n  hasSimpleHeader: false\n};\n\ninterface State {\n  contents: Content[];\n  attachments: Attachment[];\n  isContentLoading: boolean;\n}\n\nexport class ArticleDetail extends React.Component<Props, State> {\n  static defaultProps: Partial<Props>;\n  state: Readonly<State> = {\n    isContentLoading: false,\n    contents: [],\n    attachments: []\n  };\n\n  async componentDidMount() {\n    this.loadContent();\n  }\n\n  async componentDidUpdate(prevProps: Props) {\n    if (this.props.article !== prevProps.article || this.props.showContent !== prevProps.showContent) {\n      this.loadContent();\n    }\n  }\n\n  private async loadContent() {\n    if (!this.props.showContent) {\n      return;\n    }\n    this.setState({isContentLoading: true, contents: [], attachments: []});\n    const contents = await this.props.article.contents();\n    this.setState({isContentLoading: false, contents: contents.text, attachments: contents.attachments});\n  }\n\n  private nestContent(level: number, text: string): ReactNode {\n    if (level === 0) {\n      return text;\n    }\n    return <div className=\"nested-content\">{this.nestContent(level - 1, text)}</div>;\n  }\n\n  render() {\n    const {article, showContent, onClickHeader, hasSimpleHeader, groupName} = this.props;\n    const {contents, attachments, isContentLoading} = this.state;\n    return (\n      <div className=\"article-detail\">\n        <div className=\"header\" onClick={() => onClickHeader && onClickHeader(article.id)}>\n          {hasSimpleHeader && <div className=\"article-detail-chevron\">\n            {\n              showContent ? <FontAwesomeIcon icon=\"chevron-down\"/> : <FontAwesomeIcon icon=\"chevron-right\"/>\n            }\n          </div> }\n          {hasSimpleHeader\n            ? <ArticleAuthor article={article}/>\n\n            : <div>\n              <h1 className=\"article-detail-title\">{article.subject}</h1>\n              <ArticleAuthor article={article}/>\n            </div>\n          }\n          <div className=\"article-buttons\">\n            <div className=\"article-button\">\n              <a href={`mailto:${article.author.email}`} className=\"no-link\" onClick={e => e.stopPropagation()}>\n                <IconButton icon=\"reply\">Reply</IconButton>\n              </a>\n            </div>\n            <div className=\"article-button\">\n              <Link to={`/post/${groupName}/${article.number}`} className=\"no-link\">\n                <IconButton icon=\"hand-point-right\">Follow Up</IconButton>\n              </Link>\n            </div>\n            <div className=\"article-button\">\n              <Link to={`/post/${groupName}/${article.number}`} className=\"no-link\">\n                <IconButton icon=\"quote-right\">Quote</IconButton>\n              </Link>\n            </div>\n          </div>\n        </div>\n        {isContentLoading && <Loading/>}\n        {showContent && <div className=\"article-detail-content\">\n          {contents.map((content, index) =>\n            <div key={index}>\n              {this.nestContent(content.citationLevel, content.text + \"\\n\")}\n            </div>)}\n          {attachments.length > 0 &&\n          <div>\n            <p>Attachments:</p>\n            <ul className=\"attachments\">\n              {attachments.map((attachment) =>\n                <li key={attachment.name}>\n                  <a\n                    href={attachment.dataUrl}\n                    download={attachment.name}\n                  >\n                    {['image/png', 'image/gif', 'image/jpeg', 'image/svg+xml'].includes(attachment.contentType) ? (\n                      <img src={attachment.dataUrl}  alt={attachment.name} />\n                      ) : (\n                      <span>{attachment.name}</span>\n                      )\n                    }\n                  </a>\n                </li>)}\n            </ul>\n          </div>\n          }\n        </div>}\n      </div>\n    );\n  }\n}\n\nArticleDetail.defaultProps = defaultProps;\n","import React from \"react\";\nimport {ArticleId, ArticleInterface} from \"./Article\";\nimport {ArticleDetail} from \"./ArticleDetail\";\nimport {CollapsibleThreadList} from \"./CollapsibleThreadList\";\n\n\ninterface State {\n}\n\ninterface Props {\n  article: ArticleInterface;\n  showContent: boolean;\n  onClick: (id: ArticleId) => void;\n  baseUrl: string;\n  groupName: string;\n}\n\nexport class CollapsibleThreadListEntry extends React.Component<Props, State> {\n  render() {\n    const {showContent, article, onClick, baseUrl, groupName} = this.props;\n    return (\n      <li key={article.id}>\n        <ArticleDetail article={article} baseUrl={baseUrl} groupName={groupName} showContent={showContent} onClickHeader={id => onClick(id)}\n                       hasSimpleHeader={true}/>\n        {showContent && <div>\n          <CollapsibleThreadList articles={article.followUps} baseUrl={baseUrl} groupName={groupName} />\n          <div className=\"collapsible-line\" onClick={() => onClick(article.id)} />\n        </div>}\n      </li>\n    )\n  }\n}\n","import React from \"react\";\nimport {ArticleId, ArticleInterface} from \"./Article\";\nimport {CollapsibleThreadListEntry} from \"./CollapsibleThreadListEntry\";\n\n\ninterface State {\n  forceHideIds: ArticleId[];\n}\n\ninterface Props {\n  articles: ArticleInterface[];\n  baseUrl: string;\n  groupName: string;\n}\n\nexport class CollapsibleThreadList extends React.Component<Props, State> {\n  state: Readonly<State> = {\n    forceHideIds: []\n  };\n\n  handleArticleClick(articleId: ArticleId) {\n    const {forceHideIds} = this.state;\n    if (forceHideIds.includes(articleId)) {\n      forceHideIds.splice(forceHideIds.indexOf(articleId), 1)\n    } else {\n      forceHideIds.push(articleId);\n    }\n    this.setState({forceHideIds: forceHideIds});\n  }\n\n  render() {\n    const {articles, baseUrl, groupName} = this.props;\n    const {forceHideIds} = this.state;\n\n    return (\n      <div className=\"collapsible-thread-list\">\n        <ul>\n          {articles.map(article =>\n            <CollapsibleThreadListEntry baseUrl={baseUrl} groupName={groupName} key={article.id} article={article}\n                                        showContent={!forceHideIds.includes(article.id)}\n                                        onClick={id => this.handleArticleClick(id)}/>)}\n        </ul>\n      </div>\n    )\n  }\n}\n","import React from \"react\";\nimport {Article} from \"./Article\";\nimport {RouteComponentProps} from \"react-router-dom\";\nimport {Group} from \"../group/Group\";\nimport {Helmet} from \"react-helmet\";\nimport {ArticleDetail} from \"./ArticleDetail\";\nimport {CollapsibleThreadList} from \"./CollapsibleThreadList\";\n\n\ninterface State {\n  content: string\n}\n\ninterface ArticleDetailRouteParams {\n  number: string;\n  name: string;\n}\n\ninterface Props extends RouteComponentProps<ArticleDetailRouteParams> {\n  group: Group;\n  article: Article | null;\n}\n\nexport class ThreadDetail extends React.Component<Props, State> {\n  render() {\n    const {article, match} = this.props;\n    const baseUrl = `/groups/${match.params.name}/`;\n\n    if (article === null) {\n      return \"Article not found!\";\n    }\n\n    return (\n      <div className=\"thread-detail\">\n        <Helmet>\n          <title>newsR - {article?.subject}</title>\n        </Helmet>\n        <ArticleDetail baseUrl={baseUrl} groupName={match.params.name} article={article} showContent={true}/>\n        <CollapsibleThreadList baseUrl={baseUrl} groupName={match.params.name} articles={article?.followUps}/>\n      </div>\n    )\n  }\n}\n","import React, {ReactNode} from \"react\";\n\ninterface Props {\n  sidebar: ReactNode,\n  content1: ReactNode,\n  content2: ReactNode\n}\n\ninterface State {\n}\n\nexport class SidebarContent extends React.Component<Props, State> {\n\n  render() {\n    return (\n    /* ELKE */\n      <div className=\"sidebar-content\">\n        <div className=\"sidebar-content-sidebar\">{this.props.sidebar}</div>\n        <div className=\"sidebar-content-content-1\">{this.props.content1}</div>\n        <div className=\"sidebar-content-content-2\">{this.props.content2}</div>\n      </div>\n\n\n      /*<div className=\"sidebar-content\">\n              <div className=\"sidebar-content-sidebar\">{this.props.sidebar}</div>\n              <div className=\"sidebar-content-content\">{this.props.content}</div>\n            </div>*/\n    );\n  }\n}\n","export interface AuthorInterface {\n  name: string,\n  email: string\n}\n\nexport class Author implements AuthorInterface {\n  public readonly name: string;\n  public readonly email: string;\n\n  constructor(name: string, email: string) {\n    this.name = name;\n    this.email = email;\n  }\n\n  public static authorFromString(nameEmail: string) {\n    const nameEmailRegexp = new RegExp('(.*?) <(.*?)>');\n    const nameEmailResult = nameEmailRegexp.exec(nameEmail);\n    let name: string;\n    let email: string;\n    if (nameEmailResult === null) {\n      name = nameEmail;\n      email = \"placeholder.mail@srvr.at\";\n    } else {\n      name = nameEmailResult[1];\n      email = nameEmailResult[2];\n    }\n    return new Author(name, email);\n  }\n\n  public toString(): string {\n    return `${this.name} <${this.email}>`;\n  }\n}\n","export class Content {\n  public readonly citationLevel: number;\n  public readonly text: string;\n  private static readonly citationRegex: RegExp[] = [\n    new RegExp(/am(.*?)schrieb.*/, \"i\"),\n    new RegExp(/on(.*?)wrote.*/, \"i\")\n  ];\n  constructor(text: string, citationLevel: number) {\n    this.citationLevel = citationLevel;\n    this.text = text;\n  }\n\n  public isCitationStart(): boolean {\n    return this.citationLevel === 0 && Content.isCitationStart(this.text);\n  }\n\n  private static isCitationStart(text: string): boolean {\n    return this.citationRegex.find((regexp: RegExp) => regexp.test(text)) !== undefined;\n  }\n}\n","import {Article} from \"newsie\";\n\nexport class GroupCache {\n\n  private static cache: GroupCache;\n\n  private db: any;\n\n  public static async instance(): Promise<GroupCache> {\n    if (this.cache) {\n      return GroupCache.cache;\n    }\n    return new Promise((resolve, reject) => {\n      const openRequest = indexedDB.open(\"newsR\");\n\n      openRequest.onerror = () => {\n        reject();\n      };\n      openRequest.onsuccess = (event) => {\n        this.cache = new GroupCache(openRequest.result);\n        resolve(this.cache);\n      };\n      openRequest.onupgradeneeded = GroupCache.upgrade;\n    })\n  }\n\n  // todo: event type\n  private static upgrade(event: any) {\n    const db = event.target.result;\n\n    let overStore = db.createObjectStore(\"over\", { keyPath: \"id\" });\n    overStore.createIndex(\"server-group\", [\"server\", \"group\"], {unique:false});\n    overStore.createIndex(\"server\", \"server\", { unique: false });\n    overStore.createIndex(\"group\", \"group\", { unique: false });\n    overStore.createIndex(\"articleNumber\", \"articleNumber\", { unique: false });\n    overStore.createIndex(\"headers\", \"headers\", { unique: false });\n    overStore.createIndex(\"metadata\", \"metadata\", { unique: false });\n\n    let bodyStore = db.createObjectStore(\"body\", { keyPath: \"id\" });\n    bodyStore.createIndex(\"server-id\", [\"server\", \"id\"], {unique:false});\n    bodyStore.createIndex(\"server\", \"server\", { unique: false });\n    bodyStore.createIndex(\"body\", \"articleNumber\", { unique: false });\n  }\n\n  constructor(db: any) {\n    this.db = db;\n  }\n\n  // todo: fix type\n  // todo: only return once finished..\n  public async persistOverArticle(server: string, group: string, overArticle: any) {\n    let transaction = this.db.transaction([\"over\"], \"readwrite\");\n    let objectStore = transaction.objectStore(\"over\");\n    const storageObj = {\n      id: overArticle.headers[\"MESSAGE-ID\"],\n      \"server-group\": [server, group],\n      server: server,\n      group: group,\n      articleNumber: overArticle.articleNumber,\n      headers: JSON.stringify(overArticle.headers),\n      metadata: JSON.stringify(overArticle.metadata)\n    };\n    objectStore.add(storageObj);\n  }\n\n  // todo: fix overview type\n  public async persistOverArticles(server: string, group: string, overviewArticles: Article[]) {\n    overviewArticles.forEach((overArticle: any) => this.persistOverArticle(server, group, overArticle));\n  }\n\n  public async retrieveOverArticles(server: string, group: string): Promise<any[]> {\n    return new Promise((resolve => {\n      let transaction = this.db.transaction('over');\n      let objectStore = transaction.objectStore('over');\n      let index = objectStore.index(\"server-group\");\n      const overArticles: any[] = [];\n\n      index.openCursor(IDBKeyRange.only([server, group])).onsuccess = (event: any) => {\n        let cursor = event.target.result;\n        if(cursor) {\n          const overArticle = {\n            articleNumber: cursor.value.articleNumber,\n            headers: JSON.parse(cursor.value.headers),\n            metadata:  JSON.parse(cursor.value.metadata),\n          };\n          overArticles.push(overArticle);\n          cursor.continue();\n        } else {\n          resolve(overArticles);\n        }\n      };\n    }));\n  }\n\n  // todo: fix type\n  // todo: only return once finished..\n  public async persistBody(server: string, article: any) {\n    let transaction = this.db.transaction([\"body\"], \"readwrite\");\n    let objectStore = transaction.objectStore(\"body\");\n    const storageObj = {\n      id: article.messageId,\n      server: server,\n      body: JSON.stringify(article.body),\n    };\n    objectStore.add(storageObj);\n  }\n\n  public async retrieveBody(server: string, id: string): Promise<Article> {\n    return new Promise((resolve, reject) => {\n      let transaction = this.db.transaction('body');\n      let objectStore = transaction.objectStore('body');\n      let index = objectStore.index(\"server-id\");\n      index.openCursor(IDBKeyRange.only([server, id])).onsuccess = (event: any) => {\n        let cursor = event.target.result;\n        if (!cursor) {\n          resolve();\n          return;\n        }\n        const body = {\n          messageId: cursor.value.id,\n          body: JSON.parse(cursor.value.body),\n        };\n        resolve(body);\n      }\n    });\n  }\n}\n","import moment, {Moment} from \"moment\";\nimport Newsie from 'newsie';\nimport parse from \"emailjs-mime-parser\";\nimport {Author} from \"../author/Author\";\nimport {Content} from \"./Content\";\nimport {Group} from \"../group/Group\";\nimport {GroupCache} from \"../group/GroupCache\";\nimport {Attachment} from \"./Attachment\";\nimport {mimeWordsDecode} from \"emailjs-mime-codec\";\nimport {Article as NewsieArticle} from \"newsie\";\n\nexport type ArticleId = string;\n\nexport interface ArticleInterface {\n  id: ArticleId,\n  subject: string,\n  date: Moment,\n  author: Author,\n  followUps: ArticleInterface[],\n  number: number,\n\n  contents(): Promise<{text: Content[], attachments: Attachment[]}>,\n}\n\nexport class Article implements ArticleInterface {\n  private static readonly whitespaceRegex = new RegExp(/^$|\\s+/);\n  public readonly id: ArticleId;\n  public readonly number: number;\n  public readonly subject: string;\n  public readonly date: Moment;\n  public readonly author: Author;\n  public hasattachment: string;\n  public references: ArticleId[] = [];\n  public directReference: ArticleId = '';\n  public followUps: ArticleInterface[] = [];\n  private group: Group;\n  private readonly newsieClient: Newsie;\n\n  constructor(id: string, number: number, subject: string, date: Moment, author: Author, hasattachment: string, group: Group, newsieClient: Newsie) {\n    this.id = id;\n    this.number = number;\n    this.subject = subject;\n    this.date = date;\n    this.author = author;\n    this.hasattachment = hasattachment;\n    this.group = group;\n    this.newsieClient = newsieClient;\n  }\n\n  public static ArticleFromNewsieArticle(a: NewsieArticle, group: Group, newsieClient: Newsie): Article | null {\n    if (!a || !a.headers || !a.articleNumber) {\n      return null;\n    }\n    const date = moment(a.headers.DATE);\n    const author = Author.authorFromString(mimeWordsDecode(a.headers.FROM));\n    var hasattachment = '';\n    \n    if (typeof a.metadata !== 'undefined') {\n        // We assume that very large entries do have an attachment.\n        if (a.metadata[\":bytes\"] > 10000) {\n            hasattachment = ' - 📎';\n        }\n    }\n    \n    const article = new Article(a.headers['MESSAGE-ID'], a.articleNumber, mimeWordsDecode(a.headers.SUBJECT), date,\n      author, hasattachment, group, newsieClient);\n    article.setReferences(a.headers.REFERENCES);\n    return article;\n  }\n\n  public static stripStartEndCitationsFromContents(contents: Content[]) {\n    if (contents.length < 1) {\n      return;\n    }\n    const firstContent = contents[0];\n    if (firstContent.isCitationStart()) {\n      let nextRootIndex = 1;\n      while (nextRootIndex < contents.length && (contents[nextRootIndex].citationLevel !== 0 ||\n      contents[nextRootIndex].text.length === 0)) {\n        nextRootIndex++;\n      }\n      contents.splice(0, nextRootIndex);\n    }\n\n    let citationIndex: number | null = null;\n    for (let i = contents.length - 1; i >= 0; i--) {\n      const content = contents[i];\n      if (content.citationLevel === 0 && !Article.isOnlyWhitespace(content.text)) {\n        break;\n      }\n      if (content.isCitationStart()) {\n        citationIndex = i;\n        break;\n      }\n    }\n\n    if (citationIndex !== null) {\n      contents.splice(citationIndex, contents.length - citationIndex)\n    }\n  }\n\n  private static isOnlyWhitespace(text: string): boolean {\n    return Article.whitespaceRegex.test(text);\n  }\n\n  private static bodyToContents(body: string[]): {text: Content[], attachments: Attachment[]} {\n    const contents: Content[] = [];\n    let attachments: Attachment[] = [];\n\n    if (body[0] === 'This is a multi-part message in MIME format.') {\n      const missingMimeHeader =\n        'MIME-Version: 1.0\\n' +\n        `Content-Type: multipart/mixed; boundary=${body[1].substring(2)}\\n` +\n        '\\n';\n      const mimeInfo = parse(missingMimeHeader + body.join('\\n'));\n      body = mimeInfo.childNodes\n        .filter((node: any) => node.contentType.value === 'text/plain')\n        .map((node: any) => new TextDecoder(\"utf-8\").decode(node.content))\n        .join('\\n')\n        .split('\\n');\n      attachments = mimeInfo.childNodes\n        .filter((node: any) => node.contentType.value !== 'text/plain')\n        .map((node: any) => {\n          const base64 = node.raw.substring(node.raw.lastIndexOf('\\n\\n')).replace(/\\s/g, \"\");\n          return {\n            contentType: node.contentType.value,\n            name: node.contentType.params.name,\n            dataUrl: `data:${node.contentType.value};base64,${base64}`\n          };\n        });\n    }\n\n    if (!body) {\n      return {text: contents, attachments};\n    }\n\n    body.forEach((line: string) => {\n      let citationLevel = 0;\n      while (citationLevel < line.length && line[citationLevel] === \">\") {\n        citationLevel++;\n      }\n      line = line.substring(citationLevel, line.length);\n      contents.push(new Content(line, citationLevel));\n    });\n    return {text: contents, attachments};\n  }\n\n  public setReferences(references: string) {\n    if (references.length <= 0) {\n      return;\n    }\n    this.references = references.split(' ');\n    this.directReference = this.references[this.references.length - 1];\n  }\n\n  public async contents(): Promise<{text: Content[], attachments: Attachment[]}> {\n    const groupCache = await GroupCache.instance();\n    let article = await groupCache.retrieveBody(this.group.host, this.id);\n    if (!article || !article.body) {\n      article = (await this.newsieClient.body(this.id)).article;\n      if (article.body) {\n        await groupCache.persistBody(this.group.host, article);\n      } else {\n        article.body = [\n          '[newsR: content not found and not cached]'\n        ]\n      }\n    }\n    const contents = Article.bodyToContents(article.body);\n    Article.stripStartEndCitationsFromContents(contents.text);\n    return {text: contents.text, attachments: contents.attachments};\n  }\n\n  public async postFollowup(author: Author, subject: string, body: string[]): Promise<void> {\n    await this.group.post(author, subject, body, this.references.concat(this.id));\n  }\n}\n","import Newsie from 'newsie';\nimport {Article as NewsieArticle} from \"newsie\";\nimport {Author} from \"../author/Author\";\nimport {Article, ArticleInterface} from \"../article/Article\";\nimport {GroupCache} from \"./GroupCache\";\nimport packageJson from '../../package.json';\n\nexport interface GroupInterface {\n  readonly name: string;\n  readonly description: string;\n\n  threads(): Promise<ArticleInterface[]>;\n}\n\ninterface ArticleMap {\n  [key: string]: Article;\n}\n\nexport class Group implements GroupInterface {\n  public readonly name: string;\n  public readonly description: string;\n  public readonly host: string;\n  private readonly newsieClient: Newsie;\n\n  constructor(name: string, description: string, host: string, newsieClient: Newsie) {\n    this.name = name;\n    this.description = description;\n    this.newsieClient = newsieClient;\n    this.host = host;\n  }\n\n  public async article(articleNumber: number): Promise<Article|null> {\n    // todo: fix type\n    const overview: any = await this.newsieClient.over(`${articleNumber}-${articleNumber}`);\n    const groupCache = await GroupCache.instance();\n    await groupCache.persistOverArticles(this.host, this.name, overview.articles);\n    const a: NewsieArticle = overview.articles[0];\n    return Article.ArticleFromNewsieArticle(a, this, this.newsieClient);\n  }\n\n  public async threads(): Promise<Article[]> {\n    const group = (await this.newsieClient.group(this.name)).group;\n    if (group.number === 0) {\n      return [];\n    }\n    // todo: fix type\n    const overview: any = await this.newsieClient.over(`${group.low}-${group.high}`);\n    const groupCache = await GroupCache.instance();\n    await groupCache.persistOverArticles(this.host, this.name, overview.articles);\n    const articles = await groupCache.retrieveOverArticles(this.host, this.name);\n    const articlesByNumber: any[] = articles\n      .sort((a: any, b: any) => a.articleNumber - b.articleNumber)\n      .map((a: any) => {\n        return Article.ArticleFromNewsieArticle(a, this, this.newsieClient);\n      });\n    const articleIdMap: ArticleMap = {};\n    const threads: Article[] = [];\n    articlesByNumber.forEach((article) => {\n      articleIdMap[article.id] = article;\n      if (article.references.length === 0) {\n        threads.push(article);\n      } else {\n        if (articleIdMap[article.directReference]) {\n          articleIdMap[article.directReference].followUps.push(article);\n        }\n      }\n    });\n    threads.sort((a: Article, b: Article) => b.date.unix() - a.date.unix());\n    return threads;\n  }\n\n  public async post(author: Author, subject: string, body: string[], references?: string[]): Promise<void> {\n    const initialResponse = await this.newsieClient.post();\n    if (initialResponse.code !== 340) {\n      // todo: display error..\n      const errorMsg = \"Cannot post: Posting not permitted\";\n      console.error(errorMsg);\n      throw new Error(errorMsg);\n    }\n\n    const article: NewsieArticle = {\n      headers: {\n        From: author.toString(),\n        Newsgroups: this.name,\n        Subject: subject,\n        \"User-Agent\": `newsR/${packageJson.version}`\n      },\n      body: body\n    };\n    if (references && article.headers) {\n      article.headers.References = references.join(' ');\n    }\n\n    const postResponse = await initialResponse.send(article);\n    if (postResponse.code !== 240) {\n      // todo: display error..\n      const errorMsg = \"Posting failed: Posting failed\";\n      console.error(errorMsg);\n      throw new Error(errorMsg);\n    }\n  }\n}\n","import Newsie, {Command, Options as NewsieOptions} from 'newsie';\nimport {Group, GroupInterface} from \"../group/Group\";\n\ninterface ResponseHandler {\n  callback: Function\n  resolve: Function\n  reject: Function\n}\n\nclass WsConnection {\n  private readonly _socket: WebSocket;\n  private readonly _host: string;\n  private readonly _port: number;\n  private _queue: ResponseHandler[];\n  private onCloseCallback: any;\n\n  // todo: type tlsOptions: TlsOptions\n  constructor(host: string, port: number, tlsPort: boolean, tlsOptions: any) {\n    // todo: not sure if this should be here or in .connect()\n    if(!process.env.REACT_APP_WS_TO_NNTP_URL) {\n      throw Error(\"WS_TO_NNTP_URL is not defined!\");\n    }\n    this._socket = new WebSocket(process.env.REACT_APP_WS_TO_NNTP_URL);\n    this._host = host;\n    this._port = port;\n    this._queue = [];\n  }\n\n  public connect = async (): Promise<WebSocket> => {\n    return new Promise((resolve) => {\n      this._socket.addEventListener('open', () => {\n        this.write(`NNTPCONNECT ${this._host} ${this._port}`);\n        this._addSocketHandlers();\n        //return this._tlsPort ? this.upgradeTls() : Promise.resolve(this._socket);\n        resolve(this._socket);\n      });\n    });\n  };\n\n  public disconnect = () => {\n    // Close connection\n    this._socket.close();\n    //this._socket.removeAllListeners();\n    //this._socket.unref();\n    //if (this._tlsPromiseReject) {\n    //    this._tlsPromiseReject();\n    //}\n\n    // Empty the queue\n    this._queue.forEach(h => h.reject(new Error('Disconnected from server')));\n    this._queue = [];\n  };\n\n  public write = (str: string): void => {\n    this._socket.send(str);\n  };\n\n  public addCallback = (callback: Function, resolve: Function, reject: Function) => {\n    this._queue.push({callback, resolve, reject})\n  };\n\n  public setOnCloseCallback(callback: any) {\n    this.onCloseCallback = callback;\n  };\n\n  private _addSocketHandlers = (): void => {\n    this._socket.onmessage = (event) => {\n      const responseHandler = this._queue[0];\n      let response = responseHandler.callback(event.data);\n      this._queue.shift();\n      responseHandler.resolve(response);\n    };\n    this._socket.onerror = err => {\n      this._queue.forEach(h => h.reject(err));\n      this.disconnect();\n      throw err;\n    };\n    this._socket.onclose = () => {\n      console.error('WS: Connection closed');\n      this._queue.forEach(h => h.reject(new Error('Connection closed')));\n      //this._socket.removeEventListener()\n      this.onCloseCallback();\n    };\n  };\n\n}\n\nclass WsNewsie extends Newsie {\n  public _wsConnection: WsConnection;\n\n  constructor(options: NewsieOptions) {\n    super(options);\n    const {\n      host,\n      port = 119,\n      tlsPort = false,\n      tlsOptions = {}\n    } = options;\n    this._wsConnection = new WsConnection(host, port, tlsPort, tlsOptions);\n  }\n\n  public setOnCloseCallback(callback: any) {\n    this._wsConnection.setOnCloseCallback(callback);\n  }\n\n  public connect = async (): Promise<any> => {\n    const socket = await this._wsConnection.connect();\n    const response = await this.sendData(Command.GREETING);\n    return {\n      ...response,\n      socket\n    }\n  };\n\n  public disconnect = () => this._wsConnection.disconnect();\n\n  public sendData = (command: Command, payload?: string): Promise<any> =>\n    new Promise((resolve, reject) => {\n      this._wsConnection.addCallback((text: string) => JSON.parse(text), resolve, reject);\n      if (payload) {\n        this._wsConnection.write(payload)\n      }\n    })\n      //.then(this._interceptor)\n      .then((response: any) => (response.code < 400 ? response : Promise.reject(response)))\n}\n\nexport interface ServerInterface {\n  readonly host: string;\n  readonly port: number | undefined;\n\n  getGroupByName(name: string): Promise<GroupInterface | null>;\n\n  groups(): Promise<GroupInterface[]>;\n}\n\nexport class Server implements ServerInterface {\n  private static server: Server | null = null;\n  private static keepaliveIntervalReference: NodeJS.Timeout | null = null;\n  public readonly host: string;\n  public readonly port: number | undefined;\n  private newsieClient: WsNewsie;\n\n  constructor(host: string, port?: number) {\n    this.host = host;\n    if (port) {\n      this.port = port;\n    }\n    this.newsieClient = this.initWsNewsieClient(this.host, this.port);\n  }\n\n  public static async instance(): Promise<Server> {\n    if (this.server === null) {\n      const nntpUrl = localStorage.getItem(\"nntpUrl\");\n      const nntpPortStr = localStorage.getItem(\"nntpPort\");\n      if (!nntpUrl || !nntpPortStr) {\n        throw new Error('Environment variable: REACT_APP_NNTP_URL or REACT_APP_NNTP_PORT not specified.');\n      }\n      this.server = new Server(nntpUrl, parseInt(nntpPortStr));\n      await this.server.connectAndVerifyNewsieClient();\n    }\n    return this.server;\n  }\n\n  private initWsNewsieClient(host: string, port?: number | undefined): WsNewsie {\n    const newsieOptions: NewsieOptions = {\n      host\n    };\n    if (port && !isNaN(port)) {\n      newsieOptions.port = port;\n    }\n    this.newsieClient = new WsNewsie(newsieOptions);\n    this.newsieClient.setOnCloseCallback(() => {\n      console.log('WS: Reconnect!');\n      this.initWsNewsieClient(host, port);\n      this.connectAndVerifyNewsieClient();\n    });\n    return this.newsieClient;\n  }\n\n  private async connectAndVerifyNewsieClient(): Promise<WebSocket> {\n    const connection = await this.newsieClient.connect();\n    if (connection.code !== 200) {\n      throw Error('No connection to server.');\n    }\n    const capabilities = await this.newsieClient.capabilities();\n    if (!capabilities.capabilities.LIST.includes('NEWSGROUPS')) {\n      throw Error('Server does\\'t have the required LIST NEWSGROUPS capability.');\n    }\n    return connection.socket;\n  }\n\n  public async getGroupByName(name: string): Promise<Group | null> {\n    const newsgroups = await this.newsieClient.listNewsgroups(name);\n    if (newsgroups.newsgroups.length !== 1) {\n      return null;\n    }\n    return newsgroups.newsgroups.map((ng) => {\n      const description = typeof ng.description === 'undefined' ? '' : ng.description;\n      return new Group(ng.name, description, this.host, this.newsieClient);\n    })[0];\n  }\n\n  public async groups(): Promise<Group[]> {\n    // todo: remove 'tu-graz*' once https://gitlab.com/timrs2998/newsie/merge_requests/2 is merged\n    const prefix = localStorage.getItem(\"nntpGroupPrefix\");\n    const pre = prefix ? prefix : undefined;\n    const newsgroups = await this.newsieClient.listNewsgroups(pre);\n    return newsgroups.newsgroups.map((ng) => {\n      const description = typeof ng.description === 'undefined' ? '' : ng.description;\n      return new Group(ng.name, description, this.host, this.newsieClient);\n    });\n  }\n\n  public static async resetServer(): Promise<void>{\n    this.server = null;\n    await Server.instance();\n  }\n}\n","export function subscribeGroup(group: string) {\n  const subscribedGroups = getSubscribedGroups();\n\n  if (!!subscribedGroups.find(g => g === group))\n    return;\n\n  localStorage.setItem(\"subscribedGroups\", JSON.stringify(subscribedGroups.concat(group)))\n}\n\nexport function unsubscribeGroup(group: string) {\n  const subscribedGroups = getSubscribedGroups();\n\n  if (!subscribedGroups.find(g => g === group))\n    return;\n\n  localStorage.setItem(\"subscribedGroups\", JSON.stringify(subscribedGroups.filter(g => g !== group)))\n}\n\nexport function getSubscribedGroups(): string[] {\n  const subscribedGroups = localStorage.getItem(\"subscribedGroups\");\n\n  if (!subscribedGroups)\n    return [];\n\n  return JSON.parse(subscribedGroups);\n}\n\nexport function addReadArticle(group: string, article: string) {\n  const readArticles = getReadArticles(group);\n\n  if (!!readArticles.find(a => a === group))\n    return;\n\n  localStorage.setItem(group, JSON.stringify(readArticles.concat(article)))\n}\n\nexport function getReadArticles(group: string): string[] {\n  const readArticles = localStorage.getItem(group);\n\n  if (!readArticles)\n    return [];\n\n  return JSON.parse(readArticles);\n}\n","import React from \"react\";\nimport {useHistory} from \"react-router-dom\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {ListType} from \"./List\";\n\nexport function ListEntry<T extends ListType<T>>(props: {\n  entry: T\n}) {\n  const {entry} = props;\n  const history = useHistory();\n\n  function onPress() {\n    if(entry.replace && entry.url) {\n        history.replace(entry.url);\n    }\n    if(entry.onPress) {\n      entry.onPress(entry);\n    }\n    if(!entry.replace && entry.url) {\n        history.push(entry.url);\n    }\n  }\n\n  return (\n    <div  onClick={onPress} >\n\n      <div className={\"list-entry \" + entry.class}>\n        {entry.icon &&\n        <div className=\"float\">\n          <FontAwesomeIcon icon={entry.icon}/>\n        </div>\n\n        }\n        <div className=\"list-entry-text\">\n          <span className={\"title\" + (entry.bold ? \" bold\" : \"\")}>{entry.title}</span><br/>\n          <span className={\"subtitle\" + (entry.bold ? \" bold\" : \"\")}>{entry.subtitle}</span>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React from \"react\";\nimport {ListEntry} from \"./ListEntry\";\nimport {IconProp} from \"@fortawesome/fontawesome-svg-core\";\nexport type ListType<T> = {\n  title: string\n  url?: string\n  subtitle?: string\n  bold?: boolean\n  class?: string\n  icon?: IconProp\n  onPress?: (entry: T) => void\n  replace?: boolean\n};\n\nexport function List<T extends ListType<T>>(props: {\n  data: T[]\n}) {\n  const {data} = props;\n\n  return (\n    <div>\n      {data.map((entry, index) => <ListEntry key={index} entry={entry}/>)}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport logo from \"../logo.svg\";\nimport {IconButton} from \"./IconButton\";\nimport {IconProp} from \"@fortawesome/fontawesome-svg-core\";\n\nexport type Button = {\n  name: string\n  icon: IconProp\n  url?: string\n  onPress?(): void\n}\n\nexport function Header(props: {\n  name: string,\n  subtitle?: string,\n  url?: string\n  searchBar?: {\n    filter: (value: string) => void\n  }\n  buttons?: Button[]\n}) {\n  const {searchBar} = props;\n  return (\n    <div className=\"app-grid-header\">\n      <Logo/>\n      <div className=\"search-bar\">\n        <Heading name={props.name} subtitle={props.subtitle} url={props.url}/>\n        {searchBar && searchBar.filter &&\n        <input className=\"search\" type=\"text\" placeholder=\"Search...\"\n               onChange={(e) => searchBar.filter(e.target.value.toLowerCase())}/>\n        }\n      </div>\n      {props.buttons && props.buttons.map((button, index) =>\n        <Button key={index} icon={button.icon} name={button.name} url={button.url} onPress={button.onPress}/>\n      )}\n\n    </div>\n  )\n}\n\nfunction Logo() {\n  return (\n    <div className=\"logo\">\n      <Link className=\"no-link\" to={'/'}>\n        <img src={logo} alt=\"Logo\"/>\n      </Link>\n    </div>\n  )\n}\n\nfunction Heading(props: {\n  url?: string\n  name: string\n  subtitle?:string\n}) {\n\n    if (props.url) {\n      return (\n        <Link className=\"no-link\" to={`${props.url}`}>\n          <h2>{props.name}</h2>\n          {props.subtitle && (<h3 className=\"heading-subtitle\">{props.subtitle}</h3>)}\n        </Link>\n      )\n    }\n\n  return (\n    <h2>{props.name}</h2>\n  )\n}\n\nfunction Button(props: {\n  icon: IconProp,\n  name: string,\n  url?: string\n  onPress?(): void\n}) {\n  const {icon, name, url, onPress} = props\n  if (url) {\n    return (\n      <Link to={url} className=\"no-link\">\n        <div className=\"icon\">\n          <IconButton icon={icon}>{name}</IconButton>\n        </div>\n      </Link>\n    )\n  }\n\n  if (onPress) {\n    return (\n      <div className=\"icon\" onClick={() => onPress()}>\n        <IconButton icon={icon}>{name}</IconButton>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"icon\">\n      <IconButton icon={icon}>{name}</IconButton>\n    </div>\n  )\n}\n","import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport packageJson from '../../package.json';\n\nexport function Footer() {\n  return (\n    <div className=\"app-grid-footer\">\n      <span className=\"app-name\">newsR {packageJson.version}</span>\n      <a href=\"https://github.com/olliwho/newsR\" className=\"no-link github-link\">\n        <FontAwesomeIcon icon={['fab', 'github']} />&nbsp;&nbsp;Github\n      </a>\n    </div>\n  )\n}\n","import React, {Fragment} from \"react\";\nimport {Group} from \"./Group\";\nimport {ThreadDetail} from \"../article/ThreadDetail\";\nimport {SidebarContent} from \"../template/SidebarContent\";\nimport {Server} from \"../server/Server\";\nimport {Link, Route, RouteComponentProps, Switch} from \"react-router-dom\"\nimport Media from \"react-media\";\nimport {LARGE_SCREEN_QUERY, SMALL_SCREEN_QUERY} from \"../template/Constants\";\nimport {getSubscribedGroups} from \"../localStorage/localStorage\";\nimport {Loading} from \"../template/Loading\";\nimport {Article} from \"../article/Article\";\nimport {List} from \"../template/List\";\nimport {Helmet} from \"react-helmet\";\nimport {addReadArticle, getReadArticles} from \"../localStorage/localStorage\";\nimport {Button, Header} from \"../template/Header\";\nimport {Footer} from \"../template/Footer\";\nexport type ArticleId = string;\n\ninterface State {\n  loading: boolean;\n  group: Group | null;\n  groups: Group[];\n  subscribedGroupsName: string[];\n  threads: Article[];\n  readArticles: string[];\n  filteredThreads: Article[];\n  activeArticle: ArticleId;\n}\n\nexport interface GroupRouteParams {\n  name: string;\n}\n\n\n\nexport class GroupDetail extends React.Component<RouteComponentProps<GroupRouteParams>, State> {\n\n  state: Readonly<State> = {\n    loading: true,\n    group: null,\n    groups: [],\n    subscribedGroupsName: [],\n    threads: [],\n    filteredThreads: [],\n    readArticles: [],\n    activeArticle: \"\"\n  };\n\n  async componentDidMount(): Promise<void> {\n    const server = await Server.instance();\n    const groups = await server.groups();\n    const subscribedGroupsName = getSubscribedGroups();\n    const group = await server.getGroupByName(this.props.match.params.name);\n    if (group === null) {\n      this.setState({\n        loading: false,\n        group: null,\n        groups,\n        subscribedGroupsName,\n      });\n      return;\n    }\n    const threads = await group.threads();\n    const readArticles = getReadArticles(group.name);\n\n    this.setState({loading: false, group, groups, subscribedGroupsName, threads, readArticles, filteredThreads: threads});\n  }\n\n  render() {\n    const {match} = this.props;\n    const {group, loading, threads, filteredThreads} = this.state;\n\n    const filter = (text: string) => {\n      const filteredThreads = threads.filter(\n        (article) => article.subject.toLowerCase().includes(text) || article.author.name.toLowerCase().includes(text)\n      );\n      this.setState({filteredThreads})\n    };\n\n\n    const articleListData = group === null\n      ? []\n      : filteredThreads.map(article => ({\n        title: article.subject,\n        subtitle: `${article.author.name} - ${article.date.format('DD.MM.YY HH:mm')}  ${article.hasattachment} `,\n        url: `${match.url}/${article.number}`,\n        bold: !this.state.readArticles.find(a => a === article.id),\n        class: this.state.activeArticle === article.id ? \"active-article\" : \"\",\n        onPress: () => {\n          addReadArticle(group.name, article.id);\n          this.setState({readArticles: this.state.readArticles.concat(article.id), activeArticle: article.id})\n        }\n      }));\n\n    const buttons: Button[] = [\n      {\n        name: \"Write\",\n        icon: \"pencil-alt\",\n        url: group === null ? \"\" : `/post/${group.name}`\n      }\n    ];\n\n\n    const groupName = group === null ? match.params.name : group.name;\n    const headerWithSearch = <Header name={groupName} searchBar={{filter}} url={match.url} buttons={buttons}/>;\n    const headerWithoutSearch = <Header name={groupName} url={match.url} buttons={buttons}/>;\n\n    const isGroupSubscribed = (groupName: string) => {\n        return this.state.subscribedGroupsName.includes(groupName);\n    };\n\n    const getGroups = (isSubscription?: boolean): Group[] => {\n        return this.state.groups.filter(curgroup => isGroupSubscribed(curgroup.name));\n    };\n\n    return (\n      <div className=\"app-grid\">\n        <Helmet>\n          <title>newsR - {groupName}</title>\n        </Helmet>\n        <Switch>\n          <Route path={`${match.path}/:number`}>\n            <Media queries={{small: SMALL_SCREEN_QUERY, large: LARGE_SCREEN_QUERY}}>\n              {matches => (\n                <Fragment>\n                  {matches.small && headerWithoutSearch}\n                  {matches.large && headerWithSearch}\n                </Fragment>\n              )}\n            </Media>\n          </Route>\n          <Route path={`${match.path}`}>\n            {headerWithSearch}\n          </Route>\n        </Switch>\n        <div className=\"app-grid-body\">\n          {\n            loading\n              ? <Loading/>\n              : (group === null ? \"Group not found!\" :\n              <Media query={SMALL_SCREEN_QUERY}>\n                {\n                  screenIsSmall => screenIsSmall\n                    ?\n                    <Switch>\n                      <Route path={`${match.path}/:number`} render={props =>\n                        <ThreadDetail {...props} group={group}\n                                      article={threads.find(thread => thread.number === parseInt(props.match.params.number))\n                                      || null}/>\n                      }/>\n                      <Route path={`${match.path}`}>\n                        <List data={articleListData}/>\n                      </Route>\n                    </Switch>\n                    :\n                    <SidebarContent\n                      sidebar={this.state.subscribedGroupsName.length === 0\n                                                 ? <div className=\"no-thread\">\n                                                   <div className=\"no-thread-text\">\n                                                     Welcome to newsR - <Link to={`/groups-manage`}>Subscribe to a newsgroup</Link> to get started!\n                                                   </div>\n                                                 </div>\n                                                 : <List data={getGroups(true).map((curgroup) => ({\n                                                   title: curgroup.name,\n                                                   subtitle: curgroup.description,\n                                                   url: `/groups/${curgroup.name}`,\n                                                   bold: group.name === curgroup.name,\n                                                   class: group.name === curgroup.name ? \"active-group\" : \"\",\n                                                   replace: true,\n                                                    onPress: () => {\n                                                      window.location.reload();\n                                                    }\n                                                 }))}/>}\n\n                      content1={<List data={articleListData}/>}\n                      content2={\n                        <Switch>\n                          <Route path={`${match.path}/:number`} render={props =>\n                            <ThreadDetail {...props} group={group}\n                                          article={threads.find(thread => thread.number === parseInt(props.match.params.number))\n                                          || null}/>\n                          }/>\n                          <NoThread url={match.path} groupName={group.name}/>\n                        </Switch>\n                      }/>\n                    }\n              </Media>)\n          }\n        </div>\n        <Footer/>\n      </div>\n    )\n  }\n}\n\nfunction NoThread(props: {\n  url: string\n  groupName: string\n}) {\n  return (\n    <Route path={props.url}>\n      <div className=\"no-thread\">\n        <div className=\"no-thread-text\">\n          {\"Welcome to \" + props.groupName}\n        </div>\n        <div className=\"no-thread-text\">\n          Please select a thread or <Link to={`/post/${props.groupName}`}>write</Link> a new post!\n        </div>\n      </div>\n    </Route>\n  )\n}\n","import React, {ChangeEvent, FormEvent} from \"react\";\nimport {Server} from \"../server/Server\";\nimport {Author} from \"../author/Author\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {Group} from \"../group/Group\";\nimport {Article} from \"../article/Article\";\nimport {Loading} from \"../template/Loading\";\nimport {Helmet} from \"react-helmet\";\nimport {Header} from \"../template/Header\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\ninterface State {\n  loading: boolean;\n  sending: boolean;\n  done: boolean;\n  group: Group | null;\n  article: Article | null;\n  author: string,\n  subject: string,\n  content: string,\n  email: string\n}\n\nexport interface PostRouteParams {\n  name: string;\n  number: string;\n}\n\nclass _Post extends React.Component<RouteComponentProps<PostRouteParams>, {}> {\n\n  public static replyStr = 'Re: ';\n\n  state: Readonly<State> = {\n    loading: true,\n    sending: false,\n    done: false,\n    group: null,\n    article: null,\n    author: '',\n    subject: '',\n    content: '',\n    email: ''\n  };\n\n  async componentDidMount(): Promise<void> {\n    const {match} = this.props;\n    const server = await Server.instance();\n    const group = await server.getGroupByName(match.params.name);\n    this.setState({\n      author: localStorage.getItem('authorName') || \"\",\n      email: localStorage.getItem('authorEmail') || \"\"\n    });\n    if (!group) {\n      this.setState({\n        group: null,\n        article: null,\n        loading: false\n      });\n      return;\n    }\n    if (!match.params.number) {\n      this.setState({\n        group,\n        article: null,\n        loading: false\n      });\n      return;\n    }\n    const article = await group.article(parseInt(match.params.number));\n    if (!article) {\n      this.setState({\n        group: null,\n        article: null,\n        loading: false\n      });\n      return;\n    }\n    const subject = article.subject.startsWith(_Post.replyStr) ? article.subject : _Post.replyStr + article.subject;\n    this.setState({\n      group,\n      article,\n      subject,\n      loading: false\n    });\n  }\n\n  async send(event: FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n    this.setState({\n      sending: true\n    });\n    const {group, article, subject, author, email, content} = this.state;\n    if (!group) {\n      console.error('Error: cannot send, group not found.');\n      return;\n    }\n    const authorClass = new Author(author, email);\n\n    localStorage.setItem('authorName', author);\n    localStorage.setItem('authorEmail', email);\n    if (article) {\n      await article.postFollowup(authorClass, subject, [content]);\n    } else {\n      await group?.post(authorClass, subject, [content]);\n    }\n    this.setState({\n      sending: false,\n      done: true\n    });\n  }\n\n  render() {\n    const {match} = this.props;\n    const {group, article, loading, subject, author, email, content, sending, done} = this.state;\n\n    let headerText = group === null ? match.params.name : group.name;\n    let headerSubtitle = \"\";\n    if (article) {\n      headerText += ` ${_Post.replyStr + article.subject}`;\n      headerSubtitle = article.date.format(\"DD.MM.YYYY HH:mm\") + \" by \" + article.author.name;\n    }\n    // todo: insert article content as quote..\n    // todo: form validation, author\n    // todo: fix reload bug\n    return (\n      <div className=\"app-grid\">\n        <Helmet>\n          <title>newsR - {headerText}</title>\n        </Helmet>\n        <Header name={headerText} subtitle={headerSubtitle} url={match.url}/>\n        <div className=\"app-grid-body\">\n          {\n            loading ? <Loading/> : (group === null ? \"Group not found\" :\n              <form className=\"post-article\" accept-charset=\"UTF-8\" onSubmit={(event: FormEvent<HTMLFormElement>) => this.send(event)}>\n                <div className=\"input-group\">\n                  <input\n                    required\n                    name=\"author\"\n                    type=\"text\"\n                    placeholder=\"Name\"\n                    value={author}\n                    onChange={(event: ChangeEvent<HTMLInputElement>) => {\n                      this.setState({\n                        author: event.currentTarget.value\n                      })\n                    }}\n                  />\n                  <input\n                    required\n                    name=\"email\"\n                    type=\"email\"\n                    placeholder=\"email@provider.tld\"\n                    value={email}\n                    onChange={(event: ChangeEvent<HTMLInputElement>) => {\n                      this.setState({\n                        email: event.currentTarget.value\n                      })\n                    }}\n                  />\n                </div>\n                <div className=\"input-group\">\n                  <input\n                    required\n                    name=\"subject\"\n                    type=\"text\"\n                    placeholder=\"Subject: …\"\n                    value={subject}\n                    onChange={(event: ChangeEvent<HTMLInputElement>) => {\n                      this.setState({\n                        subject: event.currentTarget.value\n                      })\n                    }}\n                  />\n                </div>\n                {article && (\n                  <div className=\"input-group\">\n                    <input\n                      name=\"followup to\"\n                      type=\"hidden\"\n                      value={article?.references.concat(article.id).join(' ')}\n                      readOnly\n                    />\n                  </div>\n                )}\n                <div className=\"input-group\">\n              <textarea\n                required\n                value={content}\n                onChange={(event: ChangeEvent<HTMLTextAreaElement>) => {\n                  this.setState({\n                    content: event.currentTarget.value\n                  })\n                }}\n              />\n                </div>\n                <div className=\"input-group\">\n                  <button className=\"submit\" type=\"submit\" disabled={sending || done}>\n                    {\n                      sending ? <FontAwesomeIcon icon=\"spinner\" spin />\n                      : (done ? \"Sent!\" : \"Post\")\n                    }\n                  </button>\n                  <button className=\"back\" type=\"reset\" onClick={() => this.props.history.goBack()}>Go back</button>\n                </div>\n              </form>)\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const Post = withRouter(_Post);\n","import React, {useEffect, useState} from \"react\";\nimport {Server} from \"../server/Server\";\nimport {List} from \"../template/List\";\nimport {Loading} from \"../template/Loading\";\nimport {Group} from \"../group/Group\";\nimport {Helmet} from \"react-helmet\"\nimport {Button, Header} from \"../template/Header\";\nimport {Footer} from \"../template/Footer\";\nimport {IconProp} from \"@fortawesome/fontawesome-svg-core\";\nimport {getSubscribedGroups, subscribeGroup, unsubscribeGroup} from \"../localStorage/localStorage\";\nimport {Link, Route, Switch, Redirect} from \"react-router-dom\";\n\ninterface StartPageState {\n  groups: Group[],\n  filterText: string,\n  subscribedGroupsName: string[]\n}\n\nexport function StartPage() {\n  if(!localStorage.getItem(\"nntpUrl\")){\n    return (<Redirect to={\"/setServer\"}/>);\n  }\n  else{\n    return Start();\n  }\n}\n\nfunction Start() {\n  const [state, setState] = useState<StartPageState>({\n    groups: [],\n    filterText: \"\",\n    subscribedGroupsName: []\n  });\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async function fetchData() {\n      setLoading(true);\n\n      const server = await Server.instance();\n      const groups = await server.groups();\n      const subscribedGroupsName = getSubscribedGroups();\n      setState({\n        ...state,\n        groups,\n        subscribedGroupsName\n      });\n\n      setLoading(false)\n    }\n\n    fetchData();\n  },\n    // doesn't work with [state]? \n    // eslint-disable-next-line\n    []);\n\n  const filter = (filterText: string) => {\n    setState({...state, filterText})\n  };\n\n  const changeSubscriptionState = (group: { title: string }) => {\n    if (isGroupSubscribed(group.title)) {\n      unsubscribeGroup(group.title);\n    } else {\n      subscribeGroup(group.title);\n    }\n    const subscribedGroupsName = getSubscribedGroups();\n    setState({...state, subscribedGroupsName})\n  };\n\n  const groupIcon = (group: Group): IconProp => {\n    if (isGroupSubscribed(group.name))\n      return \"check-square\" as IconProp;\n\n    return \"square\" as IconProp\n  };\n\n  const serverButton: Button = {\n    name: \"Change Server\",\n    icon: \"tools\",\n    url: \"/setServer\"\n  };\n\n  const manageButton: Button = {\n    name: \"Manage groups\",\n    icon: \"cog\",\n    url: \"/groups-manage\"\n  };\n\n  const subscriptionButton: Button = {\n    name: \"Subscriptions\",\n    icon: \"home\",\n    url: \"/\"\n  };\n\n  const allGroupsButton: Button = {\n    name: \"All Groups\",\n    icon: \"list\",\n    url: \"/groups\"\n  };\n\n  const groupButtons: Button[] = [serverButton, manageButton, subscriptionButton];\n\n  const subscriptionButtons: Button[] = [serverButton, manageButton, allGroupsButton];\n\n  const manageButtons: Button[] = [serverButton, allGroupsButton, subscriptionButton];\n\n  const isGroupFiltered = (group: Group) => {\n    const {filterText} = state;\n    if (filterText === \"\") {\n      return true;\n    }\n    return (group.name.toLowerCase().includes(filterText) || group.description.toLowerCase().includes(filterText));\n  };\n\n  const isGroupSubscribed = (groupName: string) => {\n    return state.subscribedGroupsName.includes(groupName);\n  };\n\n  const getGroups = (isSubscription?: boolean): Group[] => {\n    return state.groups.filter(group => isGroupFiltered(group) && (isSubscription !== true || isGroupSubscribed(group.name)));\n  };\n\n  const serverUrl = localStorage.getItem(\"nntpUrl\");\n  const nntpUrl = serverUrl !== null ? serverUrl : '';\n\n  return (\n    <div className=\"app-grid\">\n      <Helmet>\n        <title>newsR - {nntpUrl}</title>\n      </Helmet>\n      <Switch>\n        <Route path=\"/groups\">\n          <Header name={nntpUrl} searchBar={{filter}} buttons={groupButtons}/>\n        </Route>\n        <Route path=\"/groups-manage\">\n          <Header name={nntpUrl} searchBar={{filter}} buttons={manageButtons}/>\n        </Route>\n        <Route path=\"/\">\n          <Header name={nntpUrl} searchBar={{filter}} buttons={subscriptionButtons}/>\n        </Route>\n      </Switch>\n      <div className=\"app-grid-body\">\n        {\n          loading ? <Loading/> :\n            <Switch>\n              <Route path=\"/setServer\">\n              </Route>\n              <Route path=\"/groups\">\n                <List data={getGroups().map((group) => ({\n                  title: group.name,\n                  subtitle: group.description,\n                  url: `/groups/${group.name}`\n                }))}/>\n              </Route>\n              <Route path=\"/groups-manage\">\n                <List data={getGroups().map((group) => ({\n                  title: group.name,\n                  subtitle: group.description,\n                  url: \"\",\n                  onPress: changeSubscriptionState,\n                  icon: groupIcon(group)\n                }))}/>\n              </Route>\n              <Route path=\"/\">\n                {state.subscribedGroupsName.length === 0\n                  ? <div className=\"no-thread\">\n                    <div className=\"no-thread-text\">\n                      Welcome to newsR - <Link to={`/groups-manage`}>Subscribe to a newsgroup</Link> to get started!\n                    </div>\n                  </div>\n                  : <List data={getGroups(true).map((group) => ({\n                    title: group.name,\n                    subtitle: group.description,\n                    url: `/groups/${group.name}`\n                  }))}/>}\n              </Route>\n            </Switch>\n        }\n      </div>\n      <Footer/>\n    </div>\n  );\n}\n\n\n\n\n","import React, {ChangeEvent, FormEvent} from \"react\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {Loading} from \"../template/Loading\";\nimport {Helmet} from \"react-helmet\";\nimport {Header} from \"../template/Header\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {Footer} from \"../template/Footer\";\nimport {Server} from \"../server/Server\";\n\ninterface ServerSelectState {\n  loading: boolean;\n  setting: boolean;\n  done: boolean;\n  url: string,\n  port: string,\n  groupPrefix: string,\n}\n\n//TODO: validate input\n\nclass _ServerSelect extends React.Component<RouteComponentProps, {}> {\n\n  state: Readonly<ServerSelectState> = {\n    loading: true,\n    setting: false,\n    done: false,\n    url: \"\",\n    port: \"\",\n    groupPrefix: \"\",\n  };\n\n  async componentDidMount(): Promise<void> {\n\n    this.setState({\n      url: localStorage.getItem('nntpUrl') || \"news.tugraz.at\",\n      port: localStorage.getItem('nntpPort') || \"119\",\n      groupPrefix: localStorage.getItem('nntpGroupPrefix') || \"tu-graz*\",\n      loading: false\n    });\n  }\n\n  async setServer(event: FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n    this.setState({\n      setting: true\n    });\n    const {url, port, groupPrefix} = this.state;\n    if (!url || !port || !groupPrefix) {\n      console.error('Error: cannot set, please fill all fields.');\n      return;\n    }\n    if(url !== localStorage.getItem('nntpUrl')){\n      localStorage.clear();\n    }\n    localStorage.setItem('nntpUrl', url);\n    localStorage.setItem('nntpPort', port);\n    localStorage.setItem('nntpGroupPrefix', groupPrefix);\n    await Server.resetServer();\n\n    this.setState({\n      setting: false,\n      done: true\n    });\n    console.log(this.props.history)\n    this.props.history.push(\"/\")\n  }\n\n  render() {\n    const {loading, setting, done, url, port, groupPrefix} = this.state;\n    return (\n      <div className=\"app-grid\">\n        <Helmet>\n          <title>newsR</title>\n        </Helmet>\n        <Header name={\"\"}/>\n        <div className=\"app-grid-body\">\n          {\n            loading ? <Loading/> :\n              <form className=\"post-article\" onSubmit={(event: FormEvent<HTMLFormElement>) => this.setServer(event)}>\n                <div className=\"input-group\">\n                  <input\n                    required\n                    name=\"url\"\n                    type=\"text\"\n                    title=\"Server URL like news.tugraz.at\"\n                    placeholder=\"Server URL like news.tugraz.at\"\n                    value={url}\n                    onChange={(event: ChangeEvent<HTMLInputElement>) => {\n                      this.setState({\n                        url: event.currentTarget.value\n                      })\n                    }}\n                  />\n                </div>\n                <div className=\"input-group\">\n                  <input\n                    required\n                    name=\"port\"\n                    type=\"text\"\n                    title=\"Server Port like 119\"\n                    placeholder=\"Server Port like 119\"\n                    value={port}\n                    onChange={(event: ChangeEvent<HTMLInputElement>) => {\n                      this.setState({\n                        port: event.currentTarget.value\n                      })\n                    }}\n                  />\n                </div>\n                <div className=\"input-group\">\n                  <input\n                    required\n                    name=\"prefix\"\n                    type=\"text\"\n                    title=\"Group Prefix like tu-graz*\"\n                    placeholder=\"Group Prefix like tu-graz*\"\n                    value={groupPrefix}\n                    onChange={(event: ChangeEvent<HTMLInputElement>) => {\n                      this.setState({\n                        groupPrefix: event.currentTarget.value\n                      })\n                    }}\n                  />\n                </div>\n                <div className=\"input-group\">\n                  <button className=\"submit\" type=\"submit\" disabled={setting}>\n                    {\n                      setting ? <FontAwesomeIcon icon=\"spinner\" spin />\n                        : (done ? \"Set!\" : \"Set\")\n                    }\n                  </button>\n                </div>\n              </form>\n          }\n        </div>\n        <Footer/>\n      </div>\n    );\n  }\n}\n\nexport const ServerSelect = withRouter(_ServerSelect);","import React, {ReactNode} from 'react';\nimport './App.scss';\nimport {GroupDetail} from \"./group/GroupDetail\";\nimport {Route, Switch} from \"react-router-dom\"\nimport {Post} from \"./post/Post\";\nimport {StartPage} from \"./startPage/StartPage\";\nimport {ServerSelect} from \"./serverSelect/ServerSelect\";\n\n\nexport default class App extends React.Component {\n  render(): ReactNode {\n    return (\n      <div className=\"app\">\n        <Switch>\n          <Route path=\"/groups/:name\" component={GroupDetail}/>\n          <Route path=\"/post/:name/:number?\" component={Post}/>\n          <Route path=\"/setServer\" component={ServerSelect}/>\n          <Route path=\"/\" component={StartPage}/>\n        </Switch>\n      </div>\n    );\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n    // websocke interception not possible with serviceWorker: https://stackoverflow.com/a/39602235/2306363\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'}\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport {HashRouter} from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\nimport {library} from '@fortawesome/fontawesome-svg-core'\nimport {\n  faChevronDown,\n  faChevronRight,\n  faCog,\n  faHandPointRight,\n  faHome,\n  faList,\n  faPencilAlt,\n  faReply,\n  faSpinner,\n  faCheckSquare,\n  faSquare,\n  faQuoteRight,\n  faTools\n} from '@fortawesome/free-solid-svg-icons'\nimport {faGithub} from '@fortawesome/free-brands-svg-icons'\n\nlibrary.add(faChevronDown, faChevronRight, faHandPointRight, faHome, faReply, faSpinner, faPencilAlt, faCog, faList,\n    faGithub, faCheckSquare, faSquare, faQuoteRight, faTools);\nReactDOM.render(\n  <HashRouter basename={process.env.REACT_APP_BASE_URL}>\n    <App/>\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/logo.8e7cbbb2.svg\";"],"sourceRoot":""}