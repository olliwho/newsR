{"version":3,"sources":["template/Loading.tsx","article/ArticleAuthor.tsx","template/Constants.ts","template/IconButton.tsx","article/ArticleDetail.tsx","article/CollapsibleThreadListEntry.tsx","article/CollapsibleThreadList.tsx","article/ThreadDetail.tsx","template/SidebarContent.tsx","author/Author.ts","article/Content.ts","group/GroupCache.ts","article/Article.ts","group/Group.ts","server/Server.ts","localStorage/localStorage.ts","template/ListEntry.tsx","template/List.tsx","template/TableEntry.tsx","template/Table.tsx","template/Header.tsx","template/Footer.tsx","group/GroupDetail.tsx","post/Post.tsx","startPage/StartPage.tsx","serverSelect/ServerSelect.tsx","App.tsx","serviceWorker.ts","index.tsx","logo.svg"],"names":["Loading","className","icon","spin","React","Component","ArticleAuthor","article","this","props","date","format","author","name","queries","small","large","matches","href","email","IconButton","children","query","screenIsSmall","ArticleDetail","state","isContentLoading","contents","attachments","loadContent","prevProps","showContent","setState","text","level","nestContent","quoteString","forEach","content","repeat","citationLevel","encodeURIComponent","onClickHeader","hasSimpleHeader","groupName","onClick","id","subject","nestQuote","e","stopPropagation","to","number","map","index","key","length","attachment","dataUrl","download","includes","contentType","src","alt","defaultProps","CollapsibleThreadListEntry","baseUrl","articles","followUps","CollapsibleThreadList","forceHideIds","articleId","splice","indexOf","push","handleArticleClick","ThreadDetail","match","params","Helmet","SidebarContent","sidebar","content1","content2","Author","nameEmail","nameEmailResult","RegExp","exec","Content","isCitationStart","undefined","citationRegex","find","regexp","test","GroupCache","db","cache","Promise","resolve","reject","openRequest","indexedDB","open","onerror","onsuccess","event","result","onupgradeneeded","upgrade","target","overStore","createObjectStore","keyPath","createIndex","unique","bodyStore","server","group","overArticle","transaction","objectStore","storageObj","headers","articleNumber","JSON","stringify","metadata","add","overviewArticles","persistOverArticle","overArticles","openCursor","IDBKeyRange","only","cursor","value","parse","continue","messageId","body","Article","hasattachment","newsieClient","references","directReference","split","instance","groupCache","retrieveBody","host","persistBody","bodyToContents","post","concat","a","moment","DATE","authorFromString","mimeWordsDecode","FROM","SUBJECT","setReferences","REFERENCES","nextRootIndex","citationIndex","i","isOnlyWhitespace","whitespaceRegex","missingMimeHeader","substring","mimeInfo","join","childNodes","filter","node","TextDecoder","decode","base64","raw","lastIndexOf","replace","line","Group","description","over","overview","persistOverArticles","ArticleFromNewsieArticle","low","high","retrieveOverArticles","articlesByNumber","sort","b","articleIdMap","threads","unix","initialResponse","code","errorMsg","console","error","Error","From","toString","Newsgroups","Subject","packageJson","version","References","send","WsConnection","port","tlsPort","tlsOptions","_socket","_host","_port","_queue","onCloseCallback","connect","async","addEventListener","write","_addSocketHandlers","disconnect","close","h","str","addCallback","callback","onmessage","responseHandler","response","data","shift","err","onclose","WebSocket","process","WsNewsie","options","_wsConnection","socket","sendData","Command","GREETING","command","payload","then","setOnCloseCallback","Newsie","Server","initWsNewsieClient","newsieOptions","isNaN","log","connectAndVerifyNewsieClient","connection","capabilities","LIST","listNewsgroups","newsgroups","ng","prefix","localStorage","getItem","pre","nntpUrl","nntpPortStr","parseInt","keepaliveIntervalReference","getSubscribedGroups","subscribedGroups","getReadArticles","readArticles","ListEntry","entry","history","useHistory","url","onPress","class","bold","title","subtitle","List","TableEntry","columns","row","column","type","referenceObject","nativeName","TableColumn","Table","urlColumn","onPressSort","sortColumn","ascending","header","sortIcon","faChevronUp","faChevronDown","sortColumnNew","newAscending","newSortColumn","onPressSortExec","dataString","Header","searchBar","Logo","Heading","placeholder","onChange","toLowerCase","buttons","button","Button","logo","Footer","GroupDetail","loading","groups","subscribedGroupsName","filteredThreads","activeArticle","getGroupByName","articleListData","setItem","addReadArticle","headerWithSearch","headerWithoutSearch","getGroups","isSubscription","curgroup","isGroupSubscribed","path","render","thread","componentDidMount","NoThread","_Post","sending","done","startsWith","replyStr","parseQuote","delay","res","setTimeout","preventDefault","authorClass","postFollowup","timeout","goBack","headerText","headerSubtitle","acceptCharset","onSubmit","required","currentTarget","readOnly","disabled","Post","withRouter","StartPage","useState","filterText","setLoading","useEffect","fetchData","changeSubscriptionState","g","unsubscribeGroup","subscribeGroup","groupIcon","serverButton","manageButton","subscriptionButton","allGroupsButton","groupButtons","subscriptionButtons","manageButtons","isGroupFiltered","serverUrl","Start","_ServerSelect","setting","groupPrefix","clear","resetServer","setServer","ServerSelect","App","component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","library","faChevronRight","faHandPointRight","faHome","faSpinner","faPencilAlt","faCog","faList","faGithub","faCheckSquare","faSquare","faTools","faEnvelope","ReactDOM","basename","document","getElementById","URL","origin","fetch","get","status","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.90e28413.chunk.js","sourcesContent":["import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\ninterface Props {\n}\n\ninterface State {\n\n}\n\nexport class Loading extends React.Component<Props, State> {\n\n  render() {\n    return (\n      <div className=\"loading-container\">\n        <div className=\"loading\">\n          <FontAwesomeIcon icon=\"spinner\" spin />&nbsp;&nbsp;Loading ...\n        </div>\n      </div>\n    );\n  }\n}\n","import {ArticleInterface} from \"./Article\";\nimport React, { Fragment } from \"react\";\nimport Media from \"react-media\";\nimport {LARGE_SCREEN_QUERY, SMALL_SCREEN_QUERY} from \"../template/Constants\";\n\ninterface Props {\n  article: ArticleInterface\n}\n\ninterface State {\n}\n\nexport class ArticleAuthor extends React.Component<Props, State> {\n  render() {\n    const {article} = this.props;\n    return (\n      <div className=\"article-detail-author\">\n        {article.date.format(\"YYYY-MM-DD HH:mm\")} by {article.author.name}\n        <Media queries={{small: SMALL_SCREEN_QUERY, large: LARGE_SCREEN_QUERY}}>\n          {matches => (\n            <Fragment>\n              {matches.small && <br />}\n              {matches.large && <Fragment>&nbsp;</Fragment>}\n            </Fragment>\n          )}\n        </Media>\n        <a href={`mailto:${article.author.email}`}>{article.author.email}</a>\n      </div>\n    );\n  }\n}\n","export const SMALL_SCREEN_QUERY = \"(max-width: 47rem)\";\nexport const LARGE_SCREEN_QUERY = \"(min-width: 47.1rem)\";\n","import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {IconProp} from \"@fortawesome/fontawesome-svg-core\";\nimport {SMALL_SCREEN_QUERY} from \"./Constants\";\nimport Media from \"react-media\";\n\ninterface Props {\n  icon: IconProp\n}\n\ninterface State {\n}\n\nexport class IconButton extends React.Component<Props, State> {\n\n  render() {\n    const {icon, children} = this.props;\n    return (\n      <Media query={SMALL_SCREEN_QUERY}>\n        {\n          screenIsSmall => screenIsSmall ?\n            < div className=\"icon-button\">\n              <FontAwesomeIcon icon={icon}/>\n            </div> :\n            < div className=\"icon-button\">\n              <FontAwesomeIcon icon={icon}/>&nbsp;&nbsp;{children}\n            </div>\n        }\n      </Media>\n    );\n  }\n}\n","import {ArticleId, ArticleInterface} from \"./Article\";\nimport React, {ReactNode} from \"react\";\nimport {Loading} from \"../template/Loading\";\nimport {Content} from \"./Content\";\nimport {ArticleAuthor} from \"./ArticleAuthor\";\nimport {IconButton} from \"../template/IconButton\";\nimport {Link} from \"react-router-dom\";\nimport {Attachment} from \"./Attachment\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\ninterface Props {\n  article: ArticleInterface;\n  showContent: boolean;\n  onClickHeader: ((id: ArticleId) => void) | null;\n  hasSimpleHeader: boolean;\n  baseUrl: string;\n  groupName: string;\n}\n\nconst defaultProps: Partial<Props> = {\n  onClickHeader: null,\n  hasSimpleHeader: false\n};\n\ninterface State {\n  contents: Content[];\n  attachments: Attachment[];\n  isContentLoading: boolean;\n}\n\nexport class ArticleDetail extends React.Component<Props, State> {\n  static defaultProps: Partial<Props>;\n  state: Readonly<State> = {\n    isContentLoading: false,\n    contents: [],\n    attachments: []\n  };\n\n  async componentDidMount() {\n    this.loadContent();\n  }\n\n  async componentDidUpdate(prevProps: Props) {\n    if (this.props.article !== prevProps.article || this.props.showContent !== prevProps.showContent) {\n      this.loadContent();\n    }\n  }\n\n  private async loadContent() {\n    if (!this.props.showContent) {\n      return;\n    }\n    this.setState({isContentLoading: true, contents: [], attachments: []});\n    const contents = await this.props.article.contents();\n    this.setState({isContentLoading: false, contents: contents.text, attachments: contents.attachments});\n  }\n\n  private nestContent(level: number, text: string): ReactNode {\n    if (level === 0) {\n      return text;\n    }\n    return <div className=\"nested-content\">{this.nestContent(level - 1, text)}</div>;\n  }\n\n  private nestQuote(contents: Content[], article: ArticleInterface): string {\n    let quoteString = `On ${article.date.format(`YYYY-MM-DD HH:mm`)}, ${article.author.name} wrote:\\n`;\n    contents.forEach(function (content) {\n      quoteString += (`>`.repeat(content.citationLevel+1) + ` ${content.text}\\n`)\n    });\n    return encodeURIComponent(quoteString);\n  }\n\n  render() {\n    const {article, showContent, onClickHeader, hasSimpleHeader, groupName} = this.props;\n    const {contents, attachments, isContentLoading} = this.state;\n    return (\n      <div className=\"article-detail\">\n        <div className=\"header\" onClick={() => onClickHeader && onClickHeader(article.id)}>\n          {hasSimpleHeader && <div className=\"article-detail-chevron\">\n            {\n              showContent ? <FontAwesomeIcon icon=\"chevron-down\"/> : <FontAwesomeIcon icon=\"chevron-right\"/>\n            }\n          </div> }\n          {hasSimpleHeader\n            ? <ArticleAuthor article={article}/>\n\n            : <div>\n              <h1 className=\"article-detail-title\">{article.subject}</h1>\n              <ArticleAuthor article={article}/>\n            </div>\n          }\n          <div className=\"article-buttons\">\n            <div className=\"article-button\">\n              <a href={`mailto:${article.author.email}?subject=${encodeURIComponent(article.subject)}&body=${this.nestQuote(contents, article)}`}\n                 className=\"no-link\" onClick={e => e.stopPropagation()}>\n                <IconButton icon=\"envelope\">Reply</IconButton>\n              </a>\n            </div>\n            <div className=\"article-button\">\n              <Link to={`/post/${groupName}/${article.number}`} className=\"no-link\">\n                <IconButton icon=\"hand-point-right\">Follow Up</IconButton>\n              </Link>\n            </div>\n          </div>\n        </div>\n        {isContentLoading && <Loading/>}\n        {showContent && <div className=\"article-detail-content\">\n          {contents.map((content, index) =>\n            <div key={index}>\n              {this.nestContent(content.citationLevel, content.text + \"\\n\")}\n            </div>)}\n          {attachments.length > 0 &&\n          <div>\n              <p>Attachments:</p>\n              <ul className=\"attachments\">\n                {attachments.map((attachment) =>\n                  <li key={attachment.name}>\n                    <a\n                      href={attachment.dataUrl}\n                      download={attachment.name}\n                    >\n                      {['image/png', 'image/gif', 'image/jpeg', 'image/svg+xml'].includes(attachment.contentType) ? (\n                        <img src={attachment.dataUrl}  alt={attachment.name} />\n                      ) : (\n                        <span>{attachment.name}</span>\n                      )\n                      }\n                    </a>\n                  </li>)}\n              </ul>\n          </div>\n          }\n        </div>}\n      </div>\n    );\n  }\n}\n\nArticleDetail.defaultProps = defaultProps;\n","import React from \"react\";\nimport {ArticleId, ArticleInterface} from \"./Article\";\nimport {ArticleDetail} from \"./ArticleDetail\";\nimport {CollapsibleThreadList} from \"./CollapsibleThreadList\";\n\n\ninterface State {\n}\n\ninterface Props {\n  article: ArticleInterface;\n  showContent: boolean;\n  onClick: (id: ArticleId) => void;\n  baseUrl: string;\n  groupName: string;\n}\n\nexport class CollapsibleThreadListEntry extends React.Component<Props, State> {\n  render() {\n    const {showContent, article, onClick, baseUrl, groupName} = this.props;\n    return (\n      <li key={article.id}>\n        <ArticleDetail article={article} baseUrl={baseUrl} groupName={groupName} showContent={showContent} onClickHeader={id => onClick(id)}\n                       hasSimpleHeader={true}/>\n        {showContent && <div>\n          <CollapsibleThreadList articles={article.followUps} baseUrl={baseUrl} groupName={groupName} />\n          <div className=\"collapsible-line\" onClick={() => onClick(article.id)} />\n        </div>}\n      </li>\n    )\n  }\n}\n","import React from \"react\";\nimport {ArticleId, ArticleInterface} from \"./Article\";\nimport {CollapsibleThreadListEntry} from \"./CollapsibleThreadListEntry\";\n\n\ninterface State {\n  forceHideIds: ArticleId[];\n}\n\ninterface Props {\n  articles: ArticleInterface[];\n  baseUrl: string;\n  groupName: string;\n}\n\nexport class CollapsibleThreadList extends React.Component<Props, State> {\n  state: Readonly<State> = {\n    forceHideIds: []\n  };\n\n  handleArticleClick(articleId: ArticleId) {\n    const {forceHideIds} = this.state;\n    if (forceHideIds.includes(articleId)) {\n      forceHideIds.splice(forceHideIds.indexOf(articleId), 1)\n    } else {\n      forceHideIds.push(articleId);\n    }\n    this.setState({forceHideIds: forceHideIds});\n  }\n\n  render() {\n    const {articles, baseUrl, groupName} = this.props;\n    const {forceHideIds} = this.state;\n\n    return (\n      <div className=\"collapsible-thread-list\">\n        <ul>\n          {articles.map(article =>\n            <CollapsibleThreadListEntry baseUrl={baseUrl} groupName={groupName} key={article.id} article={article}\n                                        showContent={!forceHideIds.includes(article.id)}\n                                        onClick={id => this.handleArticleClick(id)}/>)}\n        </ul>\n      </div>\n    )\n  }\n}\n","import React from \"react\";\nimport {Article} from \"./Article\";\nimport {RouteComponentProps} from \"react-router-dom\";\nimport {Group} from \"../group/Group\";\nimport {Helmet} from \"react-helmet\";\nimport {ArticleDetail} from \"./ArticleDetail\";\nimport {CollapsibleThreadList} from \"./CollapsibleThreadList\";\n\n\ninterface State {\n  content: string\n}\n\ninterface ArticleDetailRouteParams {\n  number: string;\n  name: string;\n}\n\ninterface Props extends RouteComponentProps<ArticleDetailRouteParams> {\n  group: Group;\n  article: Article | null;\n}\n\nexport class ThreadDetail extends React.Component<Props, State> {\n  render() {\n    const {article, match} = this.props;\n    const baseUrl = `/groups/${match.params.name}/`;\n\n    if (article === null) {\n      return \"Article not found!\";\n    }\n\n    return (\n      <div className=\"thread-detail\">\n        <Helmet>\n          <title>newsR - {article?.subject}</title>\n        </Helmet>\n        <ArticleDetail baseUrl={baseUrl} groupName={match.params.name} article={article} showContent={true}/>\n        <CollapsibleThreadList baseUrl={baseUrl} groupName={match.params.name} articles={article?.followUps}/>\n      </div>\n    )\n  }\n}\n","import React, {ReactNode} from \"react\";\n\ninterface Props {\n  sidebar: ReactNode,\n  content1: ReactNode,\n  content2: ReactNode\n}\n\ninterface State {\n}\n\nexport class SidebarContent extends React.Component<Props, State> {\n\n  render() {\n    return (\n    /* ELKE */\n      <div className=\"sidebar-content\">\n        <div className=\"sidebar-content-sidebar\">{this.props.sidebar}</div>\n        <div className=\"sidebar-content-content-1\">{this.props.content1}</div>\n        <div className=\"sidebar-content-content-2\">{this.props.content2}</div>\n      </div>\n\n\n      /*<div className=\"sidebar-content\">\n              <div className=\"sidebar-content-sidebar\">{this.props.sidebar}</div>\n              <div className=\"sidebar-content-content\">{this.props.content}</div>\n            </div>*/\n    );\n  }\n}\n","export interface AuthorInterface {\n  name: string,\n  email: string\n}\n\nexport class Author implements AuthorInterface {\n  public readonly name: string;\n  public readonly email: string;\n\n  constructor(name: string, email: string) {\n    this.name = name;\n    this.email = email;\n  }\n\n  public static authorFromString(nameEmail: string) {\n    const nameEmailRegexp = new RegExp('(.*?) <(.*?)>');\n    const nameEmailResult = nameEmailRegexp.exec(nameEmail);\n    let name: string;\n    let email: string;\n    if (nameEmailResult === null) {\n      name = nameEmail;\n      email = \"placeholder.mail@srvr.at\";\n    } else {\n      name = nameEmailResult[1];\n      email = nameEmailResult[2];\n    }\n    return new Author(name, email);\n  }\n\n  public toString(): string {\n    return `${this.name} <${this.email}>`;\n  }\n}\n","export class Content {\n  public readonly citationLevel: number;\n  public readonly text: string;\n  private static readonly citationRegex: RegExp[] = [\n    new RegExp(/am(.*?)schrieb.*/, \"i\"),\n    new RegExp(/on(.*?)wrote.*/, \"i\")\n  ];\n  constructor(text: string, citationLevel: number) {\n    this.citationLevel = citationLevel;\n    this.text = text;\n  }\n\n  public isCitationStart(): boolean {\n    return this.citationLevel === 0 && Content.isCitationStart(this.text);\n  }\n\n  private static isCitationStart(text: string): boolean {\n    return this.citationRegex.find((regexp: RegExp) => regexp.test(text)) !== undefined;\n  }\n}\n","import {Article} from \"newsie\";\n\nexport class GroupCache {\n\n  private static cache: GroupCache;\n\n  private db: any;\n\n  public static async instance(): Promise<GroupCache> {\n    if (this.cache) {\n      return GroupCache.cache;\n    }\n    return new Promise((resolve, reject) => {\n      const openRequest = indexedDB.open(\"newsR\");\n\n      openRequest.onerror = () => {\n        reject();\n      };\n      openRequest.onsuccess = (event) => {\n        this.cache = new GroupCache(openRequest.result);\n        resolve(this.cache);\n      };\n      openRequest.onupgradeneeded = GroupCache.upgrade;\n    })\n  }\n\n  // todo: event type\n  private static upgrade(event: any) {\n    const db = event.target.result;\n\n    let overStore = db.createObjectStore(\"over\", { keyPath: \"id\" });\n    overStore.createIndex(\"server-group\", [\"server\", \"group\"], {unique:false});\n    overStore.createIndex(\"server\", \"server\", { unique: false });\n    overStore.createIndex(\"group\", \"group\", { unique: false });\n    overStore.createIndex(\"articleNumber\", \"articleNumber\", { unique: false });\n    overStore.createIndex(\"headers\", \"headers\", { unique: false });\n    overStore.createIndex(\"metadata\", \"metadata\", { unique: false });\n\n    let bodyStore = db.createObjectStore(\"body\", { keyPath: \"id\" });\n    bodyStore.createIndex(\"server-id\", [\"server\", \"id\"], {unique:false});\n    bodyStore.createIndex(\"server\", \"server\", { unique: false });\n    bodyStore.createIndex(\"body\", \"articleNumber\", { unique: false });\n  }\n\n  constructor(db: any) {\n    this.db = db;\n  }\n\n  // todo: fix type\n  // todo: only return once finished..\n  public async persistOverArticle(server: string, group: string, overArticle: any) {\n    let transaction = this.db.transaction([\"over\"], \"readwrite\");\n    let objectStore = transaction.objectStore(\"over\");\n    const storageObj = {\n      id: overArticle.headers[\"MESSAGE-ID\"],\n      \"server-group\": [server, group],\n      server: server,\n      group: group,\n      articleNumber: overArticle.articleNumber,\n      headers: JSON.stringify(overArticle.headers),\n      metadata: JSON.stringify(overArticle.metadata)\n    };\n    objectStore.add(storageObj);\n  }\n\n  // todo: fix overview type\n  public async persistOverArticles(server: string, group: string, overviewArticles: Article[]) {\n    overviewArticles.forEach((overArticle: any) => this.persistOverArticle(server, group, overArticle));\n  }\n\n  public async retrieveOverArticles(server: string, group: string): Promise<any[]> {\n    return new Promise((resolve => {\n      let transaction = this.db.transaction('over');\n      let objectStore = transaction.objectStore('over');\n      let index = objectStore.index(\"server-group\");\n      const overArticles: any[] = [];\n\n      index.openCursor(IDBKeyRange.only([server, group])).onsuccess = (event: any) => {\n        let cursor = event.target.result;\n        if(cursor) {\n          const overArticle = {\n            articleNumber: cursor.value.articleNumber,\n            headers: JSON.parse(cursor.value.headers),\n            metadata:  JSON.parse(cursor.value.metadata),\n          };\n          overArticles.push(overArticle);\n          cursor.continue();\n        } else {\n          resolve(overArticles);\n        }\n      };\n    }));\n  }\n\n  // todo: fix type\n  // todo: only return once finished..\n  public async persistBody(server: string, article: any) {\n    let transaction = this.db.transaction([\"body\"], \"readwrite\");\n    let objectStore = transaction.objectStore(\"body\");\n    const storageObj = {\n      id: article.messageId,\n      server: server,\n      body: JSON.stringify(article.body),\n    };\n    objectStore.add(storageObj);\n  }\n\n  public async retrieveBody(server: string, id: string): Promise<Article> {\n    return new Promise((resolve, reject) => {\n      let transaction = this.db.transaction('body');\n      let objectStore = transaction.objectStore('body');\n      let index = objectStore.index(\"server-id\");\n      index.openCursor(IDBKeyRange.only([server, id])).onsuccess = (event: any) => {\n        let cursor = event.target.result;\n        if (!cursor) {\n          resolve();\n          return;\n        }\n        const body = {\n          messageId: cursor.value.id,\n          body: JSON.parse(cursor.value.body),\n        };\n        resolve(body);\n      }\n    });\n  }\n}\n","import moment, {Moment} from \"moment\";\nimport Newsie from 'newsie';\nimport parse from \"emailjs-mime-parser\";\nimport {Author} from \"../author/Author\";\nimport {Content} from \"./Content\";\nimport {Group} from \"../group/Group\";\nimport {GroupCache} from \"../group/GroupCache\";\nimport {Attachment} from \"./Attachment\";\nimport {mimeWordsDecode} from \"emailjs-mime-codec\";\nimport {Article as NewsieArticle} from \"newsie\";\n\nexport type ArticleId = string;\n\nexport interface ArticleInterface {\n  id: ArticleId,\n  subject: string,\n  date: Moment,\n  author: Author,\n  followUps: ArticleInterface[],\n  number: number,\n\n  contents(): Promise<{text: Content[], attachments: Attachment[]}>,\n}\n\nexport class Article implements ArticleInterface {\n  private static readonly whitespaceRegex = new RegExp(/^$|\\s+/);\n  public readonly id: ArticleId;\n  public readonly number: number;\n  public readonly subject: string;\n  public readonly date: Moment;\n  public readonly author: Author;\n  public hasattachment: string;\n  public references: ArticleId[] = [];\n  public directReference: ArticleId = '';\n  public followUps: ArticleInterface[] = [];\n  private group: Group;\n  private readonly newsieClient: Newsie;\n\n  constructor(id: string, number: number, subject: string, date: Moment, author: Author, hasattachment: string, group: Group, newsieClient: Newsie) {\n    this.id = id;\n    this.number = number;\n    this.subject = subject;\n    this.date = date;\n    this.author = author;\n    this.hasattachment = hasattachment;\n    this.group = group;\n    this.newsieClient = newsieClient;\n  }\n\n  public static ArticleFromNewsieArticle(a: NewsieArticle, group: Group, newsieClient: Newsie): Article | null {\n    if (!a || !a.headers || !a.articleNumber) {\n      return null;\n    }\n    const date = moment(a.headers.DATE);\n    const author = Author.authorFromString(mimeWordsDecode(a.headers.FROM));\n    var hasattachment = '';\n    \n    if (typeof a.metadata !== 'undefined') {\n        // We assume that very large entries do have an attachment.\n        if (a.metadata[\":bytes\"] > 10000) {\n            hasattachment = ' - 📎';\n        }\n    }\n    \n    const article = new Article(a.headers['MESSAGE-ID'], a.articleNumber, mimeWordsDecode(a.headers.SUBJECT), date,\n      author, hasattachment, group, newsieClient);\n    article.setReferences(a.headers.REFERENCES);\n    return article;\n  }\n\n  public static stripStartEndCitationsFromContents(contents: Content[]) {\n    if (contents.length < 1) {\n      return;\n    }\n    const firstContent = contents[0];\n    if (firstContent.isCitationStart()) {\n      let nextRootIndex = 1;\n      while (nextRootIndex < contents.length && (contents[nextRootIndex].citationLevel !== 0 ||\n        contents[nextRootIndex].text.length === 0)) {\n        nextRootIndex++;\n      }\n      contents.splice(0, nextRootIndex);\n    }\n\n    let citationIndex: number | null = null;\n    for (let i = contents.length - 1; i >= 0; i--) {\n      const content = contents[i];\n      if (content.citationLevel === 0 && !Article.isOnlyWhitespace(content.text)) {\n        break;\n      }\n      if (content.isCitationStart()) {\n        citationIndex = i;\n        break;\n      }\n    }\n\n    if (citationIndex !== null) {\n      contents.splice(citationIndex, contents.length - citationIndex)\n    }\n  }\n\n  private static isOnlyWhitespace(text: string): boolean {\n    return Article.whitespaceRegex.test(text);\n  }\n\n  private static bodyToContents(body: string[]): {text: Content[], attachments: Attachment[]} {\n    const contents: Content[] = [];\n    let attachments: Attachment[] = [];\n\n    if (body[0] === 'This is a multi-part message in MIME format.') {\n      const missingMimeHeader =\n        'MIME-Version: 1.0\\n' +\n        `Content-Type: multipart/mixed; boundary=${body[1].substring(2)}\\n` +\n        '\\n';\n      const mimeInfo = parse(missingMimeHeader + body.join('\\n'));\n      body = mimeInfo.childNodes\n        .filter((node: any) => node.contentType.value === 'text/plain')\n        .map((node: any) => new TextDecoder(\"utf-8\").decode(node.content))\n        .join('\\n')\n        .split('\\n');\n      attachments = mimeInfo.childNodes\n        .filter((node: any) => node.contentType.value !== 'text/plain')\n        .map((node: any) => {\n          const base64 = node.raw.substring(node.raw.lastIndexOf('\\n\\n')).replace(/\\s/g, \"\");\n          return {\n            contentType: node.contentType.value,\n            name: node.contentType.params.name,\n            dataUrl: `data:${node.contentType.value};base64,${base64}`\n          };\n        });\n    }\n\n    if (!body) {\n      return {text: contents, attachments};\n    }\n\n    body.forEach((line: string) => {\n      let citationLevel = 0;\n      while (citationLevel < line.length && line[citationLevel] === \">\") {\n        citationLevel++;\n      }\n      line = line.substring(citationLevel, line.length);\n      contents.push(new Content(line, citationLevel));\n    });\n    return {text: contents, attachments};\n  }\n\n  public setReferences(references: string) {\n    if (references.length <= 0) {\n      return;\n    }\n    this.references = references.split(' ');\n    this.directReference = this.references[this.references.length - 1];\n  }\n\n  public async contents(): Promise<{text: Content[], attachments: Attachment[]}> {\n    const groupCache = await GroupCache.instance();\n    let article = await groupCache.retrieveBody(this.group.host, this.id);\n    if (!article || !article.body) {\n      article = (await this.newsieClient.body(this.id)).article;\n      if (article.body) {\n        await groupCache.persistBody(this.group.host, article);\n      } else {\n        article.body = [\n          '[newsR: content not found and not cached]'\n        ]\n      }\n    }\n    const contents = Article.bodyToContents(article.body);\n    // Article.stripStartEndCitationsFromContents(contents.text);\n    return {text: contents.text, attachments: contents.attachments};\n  }\n\n  public async postFollowup(author: Author, subject: string, body: string[]): Promise<void> {\n    await this.group.post(author, subject, body, this.references.concat(this.id));\n  }\n}\n","import Newsie from 'newsie';\nimport {Article as NewsieArticle} from \"newsie\";\nimport {Author} from \"../author/Author\";\nimport {Article, ArticleInterface} from \"../article/Article\";\nimport {GroupCache} from \"./GroupCache\";\nimport packageJson from '../../package.json';\n\nexport interface GroupInterface {\n  readonly name: string;\n  readonly description: string;\n\n  threads(): Promise<ArticleInterface[]>;\n}\n\ninterface ArticleMap {\n  [key: string]: Article;\n}\n\nexport class Group implements GroupInterface {\n  public readonly name: string;\n  public readonly description: string;\n  public readonly host: string;\n  private readonly newsieClient: Newsie;\n\n  constructor(name: string, description: string, host: string, newsieClient: Newsie) {\n    this.name = name;\n    this.description = description;\n    this.newsieClient = newsieClient;\n    this.host = host;\n  }\n\n  public async article(articleNumber: number): Promise<Article|null> {\n    // todo: fix type\n    const overview: any = await this.newsieClient.over(`${articleNumber}-${articleNumber}`);\n    const groupCache = await GroupCache.instance();\n    await groupCache.persistOverArticles(this.host, this.name, overview.articles);\n    const a: NewsieArticle = overview.articles[0];\n    return Article.ArticleFromNewsieArticle(a, this, this.newsieClient);\n  }\n\n  public async threads(): Promise<Article[]> {\n    const group = (await this.newsieClient.group(this.name)).group;\n    if (group.number === 0) {\n      return [];\n    }\n    // todo: fix type\n    const overview: any = await this.newsieClient.over(`${group.low}-${group.high}`);\n    const groupCache = await GroupCache.instance();\n    await groupCache.persistOverArticles(this.host, this.name, overview.articles);\n    const articles = await groupCache.retrieveOverArticles(this.host, this.name);\n    const articlesByNumber: any[] = articles\n      .sort((a: any, b: any) => a.articleNumber - b.articleNumber)\n      .map((a: any) => {\n        return Article.ArticleFromNewsieArticle(a, this, this.newsieClient);\n      });\n    const articleIdMap: ArticleMap = {};\n    const threads: Article[] = [];\n    articlesByNumber.forEach((article) => {\n      articleIdMap[article.id] = article;\n      if (article.references.length === 0) {\n        threads.push(article);\n      } else {\n        if (articleIdMap[article.directReference]) {\n          articleIdMap[article.directReference].followUps.push(article);\n        }\n      }\n    });\n    threads.sort((a: Article, b: Article) => b.date.unix() - a.date.unix());\n    return threads;\n  }\n\n  public async post(author: Author, subject: string, body: string[], references?: string[]): Promise<void> {\n    const initialResponse = await this.newsieClient.post();\n    if (initialResponse.code !== 340) {\n      // todo: display error..\n      const errorMsg = \"Cannot post: Posting not permitted\";\n      console.error(errorMsg);\n      throw new Error(errorMsg);\n    }\n\n    const article: NewsieArticle = {\n      headers: {\n        From: author.toString(),\n        Newsgroups: this.name,\n        Subject: subject,\n        \"User-Agent\": `newsR/${packageJson.version}`\n      },\n      body: body\n    };\n    if (references && article.headers) {\n      article.headers.References = references.join(' ');\n    }\n\n    const postResponse = await initialResponse.send(article);\n    if (postResponse.code !== 240) {\n      // todo: display error..\n      const errorMsg = \"Posting failed: Posting failed\";\n      console.error(errorMsg);\n      throw new Error(errorMsg);\n    }\n  }\n}\n","import Newsie, {Command, Options as NewsieOptions} from 'newsie';\nimport {Group, GroupInterface} from \"../group/Group\";\n\ninterface ResponseHandler {\n  callback: Function\n  resolve: Function\n  reject: Function\n}\n\nclass WsConnection {\n  private readonly _socket: WebSocket;\n  private readonly _host: string;\n  private readonly _port: number;\n  private _queue: ResponseHandler[];\n  private onCloseCallback: any;\n\n  // todo: type tlsOptions: TlsOptions\n  constructor(host: string, port: number, tlsPort: boolean, tlsOptions: any) {\n    // todo: not sure if this should be here or in .connect()\n    if(!process.env.REACT_APP_WS_TO_NNTP_URL) {\n      throw Error(\"WS_TO_NNTP_URL is not defined!\");\n    }\n    this._socket = new WebSocket(process.env.REACT_APP_WS_TO_NNTP_URL);\n    this._host = host;\n    this._port = port;\n    this._queue = [];\n  }\n\n  public connect = async (): Promise<WebSocket> => {\n    return new Promise((resolve) => {\n      this._socket.addEventListener('open', () => {\n        this.write(`NNTPCONNECT ${this._host} ${this._port}`);\n        this._addSocketHandlers();\n        //return this._tlsPort ? this.upgradeTls() : Promise.resolve(this._socket);\n        resolve(this._socket);\n      });\n    });\n  };\n\n  public disconnect = () => {\n    // Close connection\n    this._socket.close();\n    //this._socket.removeAllListeners();\n    //this._socket.unref();\n    //if (this._tlsPromiseReject) {\n    //    this._tlsPromiseReject();\n    //}\n\n    // Empty the queue\n    this._queue.forEach(h => h.reject(new Error('Disconnected from server')));\n    this._queue = [];\n  };\n\n  public write = (str: string): void => {\n    this._socket.send(str);\n  };\n\n  public addCallback = (callback: Function, resolve: Function, reject: Function) => {\n    this._queue.push({callback, resolve, reject})\n  };\n\n  public setOnCloseCallback(callback: any) {\n    this.onCloseCallback = callback;\n  };\n\n  private _addSocketHandlers = (): void => {\n    this._socket.onmessage = (event) => {\n      const responseHandler = this._queue[0];\n      let response = responseHandler.callback(event.data);\n      this._queue.shift();\n      responseHandler.resolve(response);\n    };\n    this._socket.onerror = err => {\n      this._queue.forEach(h => h.reject(err));\n      this.disconnect();\n      throw err;\n    };\n    this._socket.onclose = () => {\n      console.error('WS: Connection closed');\n      this._queue.forEach(h => h.reject(new Error('Connection closed')));\n      //this._socket.removeEventListener()\n      this.onCloseCallback();\n    };\n  };\n\n}\n\nclass WsNewsie extends Newsie {\n  public _wsConnection: WsConnection;\n\n  constructor(options: NewsieOptions) {\n    super(options);\n    const {\n      host,\n      port = 119,\n      tlsPort = false,\n      tlsOptions = {}\n    } = options;\n    this._wsConnection = new WsConnection(host, port, tlsPort, tlsOptions);\n  }\n\n  public setOnCloseCallback(callback: any) {\n    this._wsConnection.setOnCloseCallback(callback);\n  }\n\n  public connect = async (): Promise<any> => {\n    const socket = await this._wsConnection.connect();\n    const response = await this.sendData(Command.GREETING);\n    return {\n      ...response,\n      socket\n    }\n  };\n\n  public disconnect = () => this._wsConnection.disconnect();\n\n  public sendData = (command: Command, payload?: string): Promise<any> =>\n    new Promise((resolve, reject) => {\n      this._wsConnection.addCallback((text: string) => JSON.parse(text), resolve, reject);\n      if (payload) {\n        this._wsConnection.write(payload)\n      }\n    })\n      //.then(this._interceptor)\n      .then((response: any) => (response.code < 400 ? response : Promise.reject(response)))\n}\n\nexport interface ServerInterface {\n  readonly host: string;\n  readonly port: number | undefined;\n\n  getGroupByName(name: string): Promise<GroupInterface | null>;\n\n  groups(): Promise<GroupInterface[]>;\n}\n\nexport class Server implements ServerInterface {\n  private static server: Server | null = null;\n  private static keepaliveIntervalReference: NodeJS.Timeout | null = null;\n  public readonly host: string;\n  public readonly port: number | undefined;\n  private newsieClient: WsNewsie;\n\n  constructor(host: string, port?: number) {\n    this.host = host;\n    if (port) {\n      this.port = port;\n    }\n    this.newsieClient = this.initWsNewsieClient(this.host, this.port);\n  }\n\n  public static async instance(): Promise<Server> {\n    if (this.server === null) {\n      const nntpUrl = localStorage.getItem(\"nntpUrl\");\n      const nntpPortStr = localStorage.getItem(\"nntpPort\");\n      if (!nntpUrl || !nntpPortStr) {\n        throw new Error('Server URl or Server Port not specified.');\n      }\n      this.server = new Server(nntpUrl, parseInt(nntpPortStr));\n      await this.server.connectAndVerifyNewsieClient();\n    }\n    return this.server;\n  }\n\n  private initWsNewsieClient(host: string, port?: number | undefined): WsNewsie {\n    const newsieOptions: NewsieOptions = {\n      host\n    };\n    if (port && !isNaN(port)) {\n      newsieOptions.port = port;\n    }\n    this.newsieClient = new WsNewsie(newsieOptions);\n    this.newsieClient.setOnCloseCallback(() => {\n      console.log('WS: Reconnect!');\n      this.initWsNewsieClient(host, port);\n      this.connectAndVerifyNewsieClient();\n    });\n    return this.newsieClient;\n  }\n\n  private async connectAndVerifyNewsieClient(): Promise<WebSocket> {\n    const connection = await this.newsieClient.connect();\n    if (connection.code !== 200) {\n      throw Error('No connection to server.');\n    }\n    const capabilities = await this.newsieClient.capabilities();\n    if (!capabilities.capabilities.LIST.includes('NEWSGROUPS')) {\n      throw Error('Server does\\'t have the required LIST NEWSGROUPS capability.');\n    }\n    return connection.socket;\n  }\n\n  public async getGroupByName(name: string): Promise<Group | null> {\n    const newsgroups = await this.newsieClient.listNewsgroups(name);\n    if (newsgroups.newsgroups.length !== 1) {\n      return null;\n    }\n    return newsgroups.newsgroups.map((ng) => {\n      const description = typeof ng.description === 'undefined' ? '' : ng.description;\n      return new Group(ng.name, description, this.host, this.newsieClient);\n    })[0];\n  }\n\n  public async groups(): Promise<Group[]> {\n    // todo: remove 'tu-graz*' once https://gitlab.com/timrs2998/newsie/merge_requests/2 is merged\n    const prefix = localStorage.getItem(\"nntpGroupPrefix\");\n    const pre = prefix ? prefix : undefined;\n    const newsgroups = await this.newsieClient.listNewsgroups(pre);\n    return newsgroups.newsgroups.map((ng) => {\n      const description = typeof ng.description === 'undefined' ? '' : ng.description;\n      return new Group(ng.name, description, this.host, this.newsieClient);\n    });\n  }\n\n  public static async resetServer(): Promise<void>{\n    this.server = null;\n    await Server.instance();\n  }\n}\n","export function subscribeGroup(group: string) {\n  const subscribedGroups = getSubscribedGroups();\n\n  if (!!subscribedGroups.find(g => g === group))\n    return;\n\n  localStorage.setItem(\"subscribedGroups\", JSON.stringify(subscribedGroups.concat(group)))\n}\n\nexport function unsubscribeGroup(group: string) {\n  const subscribedGroups = getSubscribedGroups();\n\n  if (!subscribedGroups.find(g => g === group))\n    return;\n\n  localStorage.setItem(\"subscribedGroups\", JSON.stringify(subscribedGroups.filter(g => g !== group)))\n}\n\nexport function getSubscribedGroups(): string[] {\n  const subscribedGroups = localStorage.getItem(\"subscribedGroups\");\n\n  if (!subscribedGroups)\n    return [];\n\n  return JSON.parse(subscribedGroups);\n}\n\nexport function addReadArticle(group: string, article: string) {\n  const readArticles = getReadArticles(group);\n\n  if (!!readArticles.find(a => a === group))\n    return;\n\n  localStorage.setItem(group, JSON.stringify(readArticles.concat(article)))\n}\n\nexport function getReadArticles(group: string): string[] {\n  const readArticles = localStorage.getItem(group);\n\n  if (!readArticles)\n    return [];\n\n  return JSON.parse(readArticles);\n}\n","import React from \"react\";\nimport {useHistory} from \"react-router-dom\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {ListType} from \"./List\";\n\nexport function ListEntry<T extends ListType<T>>(props: {\n  entry: T\n}) {\n  const {entry} = props;\n  const history = useHistory();\n\n  function onPress() {\n    if(entry.replace && entry.url) {\n        history.replace(entry.url);\n    }\n    if(entry.onPress) {\n      entry.onPress(entry);\n    }\n    if(!entry.replace && entry.url) {\n        history.push(entry.url);\n    }\n\n  }\n\n  return (\n\n    <div  onClick={onPress} >\n\n      <div className={\"list-entry \" + entry.class}>\n        {entry.icon &&\n        <div className=\"float\">\n          <FontAwesomeIcon icon={entry.icon}/>\n        </div>\n\n        }\n        <div className=\"list-entry-text\">\n          <span className={\"title\" + (entry.bold ? \" bold\" : \"\")}>{entry.title}</span><br/>\n          <span className={\"subtitle\" + (entry.bold ? \" bold\" : \"\")}>{entry.subtitle}</span>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React from \"react\";\nimport {ListEntry} from \"./ListEntry\";\nimport {IconProp} from \"@fortawesome/fontawesome-svg-core\";\nexport type ListType<T> = {\n  title: string\n  url?: string\n  subtitle?: string\n  bold?: boolean\n  class?: string\n  icon?: IconProp\n  onPress?: (entry: T) => void\n  replace?: boolean\n};\n\nexport function List<T extends ListType<T>>(props: {\n  data: T[]\n}) {\n  const {data} = props;\n\n  return (\n    <div>\n      {data.map((entry, index) => <ListEntry key={index} entry={entry}/>)}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {useHistory} from \"react-router-dom\";\nimport {TableType, TableColumn} from \"./Table\";\nimport {Author} from \"../author/Author\";\nimport {Moment} from \"moment\";\n\nexport function TableEntry<T extends TableType<T>>(props: {\n  entry: T\n  columns: TableColumn[]\n  urlColumn: string\n}) {\n  const {entry} = props;\n  const {columns} = props;\n  const history = useHistory();\n\n  function onPress() {\n    if(entry.onPress) {\n      entry.onPress(entry);\n    }\n    if(entry.url) {\n        history.push(entry.url);\n    }\n  }\n\n  const row = columns.map((column, i) => {\n            if (entry != null && entry[\"referenceObject\" as keyof TableType<T>] != null)\n            {\n                var value = \"\"\n                if (column.type === 1)\n                    value = (entry.referenceObject[column.nativeName as keyof object] as Author).toString()\n                else if (column.type === 2)\n                    value = (entry.referenceObject[column.nativeName as keyof object] as Moment).format(\"YYYY-MM-DD HH:mm\")\n                else\n                    value = entry.referenceObject[column.nativeName as keyof object]\n                return <td>{value}</td>\n            }\n            else\n                return <td></td>\n        });\n\n  return (\n    <tr onClick={onPress} className={\"table-entry\" + (entry.bold ? \" bold\" : \"\") + (entry.class ? \" \" + entry.class : \"\")}>\n        {row}\n    </tr>\n  )\n}\n\n","import React from \"react\";\nimport {TableEntry} from \"./TableEntry\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {IconProp} from \"@fortawesome/fontawesome-svg-core\";\nimport {faChevronUp, faChevronDown} from \"@fortawesome/free-solid-svg-icons\";\n\nexport class TableColumn {\n    public readonly name: string\n    public readonly type: number\n    public readonly nativeName: string\n\n    constructor(name: string, type: number, nativeName: string) {\n        this.name = name;\n        this.type = type;\n        this.nativeName = nativeName;\n    }\n}\n\nexport type TableType<T> = {\n  bold?: boolean\n  class?: string\n  url?: string\n  icon?: IconProp\n  onPress?: (entry: T) => void\n  referenceObject: object\n};\n\nexport function Table<T extends TableType<T>>(props: {\n  data: T[]\n  columns: TableColumn[]\n  urlColumn: string,\n  onPressSort: (sortColumn:string, ascending:boolean) => void\n  sortColumn:string\n  ascending:boolean\n}) {\n  const {data} = props;\n  const {columns} = props;\n  const {urlColumn} = props;\n  const {onPressSort} = props;\n  const {sortColumn} = props;\n  const {ascending} = props;\n\n  function onPressSortExec(sortColumnNew:string) {\n    var newAscending:boolean = false;\n    var newSortColumn:string = sortColumn;\n    if (sortColumnNew !== sortColumn)\n    {\n        newAscending = true;\n        newSortColumn = sortColumnNew;\n    }\n    else\n        newAscending = !ascending;\n\n    onPressSort(newSortColumn, newAscending);\n  }\n\n  const header = columns.map((column, i) => {\n        const value = column.name\n        const nativeName = column.nativeName\n        const sortIcon = (column.nativeName === sortColumn) ? (ascending) ? <FontAwesomeIcon icon={faChevronUp} /> : <FontAwesomeIcon icon={faChevronDown} /> : \"\"\n        return <th id={nativeName} onClick={() => onPressSortExec(nativeName)}>{value} {sortIcon}</th>\n    });\n\n    var dataString = null;\n    loadDataString();\n\n    function loadDataString()\n    {\n        if (sortColumn === \"\")\n            dataString = data.map((entry, index) => <TableEntry key={index} entry={entry} columns={columns} urlColumn={urlColumn}/>);\n        else\n            dataString = data.sort((a, b) => a.referenceObject[sortColumn as keyof object] > b.referenceObject[sortColumn as keyof object] ? (ascending ? 1 : -1) : (ascending ? -1 : 1)).map((entry, index) => <TableEntry key={index} entry={entry} columns={columns} urlColumn={urlColumn}/>);\n    }\n\n  return (\n    <table>\n        <thead>\n            <tr>{header}</tr>\n        </thead>\n        {dataString}\n    </table>\n  );\n}\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport logo from \"../logo.svg\";\nimport {IconButton} from \"./IconButton\";\nimport {IconProp} from \"@fortawesome/fontawesome-svg-core\";\n\nexport type Button = {\n  name: string\n  icon: IconProp\n  url?: string\n  onPress?(): void\n}\n\nexport function Header(props: {\n  name: string,\n  subtitle?: string,\n  url?: string\n  searchBar?: {\n    filter: (value: string) => void\n  }\n  buttons?: Button[]\n}) {\n  const {searchBar} = props;\n  return (\n    <div className=\"app-grid-header\">\n      <Logo/>\n      <div className=\"search-bar\">\n        <Heading name={props.name} subtitle={props.subtitle} url={props.url}/>\n        {searchBar && searchBar.filter &&\n        <input className=\"search\" type=\"text\" placeholder=\"Search Headers\"\n               onChange={(e) => searchBar.filter(e.target.value.toLowerCase())}/>\n        }\n      </div>\n      {props.buttons && props.buttons.map((button, index) =>\n        <Button key={index} icon={button.icon} name={button.name} url={button.url} onPress={button.onPress}/>\n      )}\n\n    </div>\n  )\n}\n\nfunction Logo() {\n  return (\n    <div className=\"logo\">\n      <Link className=\"no-link\" to={'/'}>\n        <img src={logo} alt=\"Logo\"/>\n      </Link>\n    </div>\n  )\n}\n\nfunction Heading(props: {\n  url?: string\n  name: string\n  subtitle?:string\n}) {\n\n    if (props.url) {\n      return (\n        <Link className=\"no-link\" to={`${props.url}`}>\n          <h2>{props.name}</h2>\n          {props.subtitle && (<h3 className=\"heading-subtitle\">{props.subtitle}</h3>)}\n        </Link>\n      )\n    }\n\n  return (\n    <h2>{props.name}</h2>\n  )\n}\n\nfunction Button(props: {\n  icon: IconProp,\n  name: string,\n  url?: string\n  onPress?(): void\n}) {\n  const {icon, name, url, onPress} = props\n  if (url) {\n    return (\n      <Link to={url} className=\"no-link\">\n        <div className=\"icon\">\n          <IconButton icon={icon}>{name}</IconButton>\n        </div>\n      </Link>\n    )\n  }\n\n  if (onPress) {\n    return (\n      <div className=\"icon\" onClick={() => onPress()}>\n        <IconButton icon={icon}>{name}</IconButton>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"icon\">\n      <IconButton icon={icon}>{name}</IconButton>\n    </div>\n  )\n}\n","import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport packageJson from '../../package.json';\n\nexport function Footer() {\n  return (\n    <div className=\"app-grid-footer\">\n      <span className=\"app-name\">newsR {packageJson.version}</span>\n      <a href=\"https://github.com/olliwho/newsR\" className=\"no-link github-link\">\n        <FontAwesomeIcon icon={['fab', 'github']} />&nbsp;&nbsp;Github\n      </a>\n    </div>\n  )\n}\n","import React, {Fragment} from \"react\";\nimport {Group} from \"./Group\";\nimport {ThreadDetail} from \"../article/ThreadDetail\";\nimport {SidebarContent} from \"../template/SidebarContent\";\nimport {Server} from \"../server/Server\";\nimport {Link, Redirect, Route, RouteComponentProps, Switch} from \"react-router-dom\"\nimport Media from \"react-media\";\nimport {LARGE_SCREEN_QUERY, SMALL_SCREEN_QUERY} from \"../template/Constants\";\nimport {getSubscribedGroups} from \"../localStorage/localStorage\";\nimport {Loading} from \"../template/Loading\";\nimport {Article} from \"../article/Article\";\nimport {List} from \"../template/List\";\nimport {Table, TableColumn} from \"../template/Table\";\nimport {Helmet} from \"react-helmet\";\nimport {addReadArticle, getReadArticles} from \"../localStorage/localStorage\";\nimport {Button, Header} from \"../template/Header\";\nimport {Footer} from \"../template/Footer\";\nexport type ArticleId = string;\n\ninterface State {\n  loading: boolean;\n  group: Group | null;\n  groups: Group[];\n  subscribedGroupsName: string[];\n  threads: Article[];\n  readArticles: string[];\n  filteredThreads: Article[];\n  activeArticle: ArticleId;\n  sortColumn: string;\n  ascending: boolean;\n}\n\nexport interface GroupRouteParams {\n  name: string;\n}\n\n\n\nexport class GroupDetail extends React.Component<RouteComponentProps<GroupRouteParams>, State> {\n\n  state: Readonly<State> = {\n    loading: true,\n    group: null,\n    groups: [],\n    subscribedGroupsName: [],\n    threads: [],\n    filteredThreads: [],\n    readArticles: [],\n    activeArticle: \"\",\n    sortColumn: \"\",\n    ascending: true\n  };\n\n  async componentDidMount(): Promise<void> {\n    const nntpUrl = localStorage.getItem(\"nntpUrl\");\n    const nntpPortStr = localStorage.getItem(\"nntpPort\");\n    if (!nntpUrl || !nntpPortStr) {\n      return;\n    }\n    const server = await Server.instance();\n    const groups = await server.groups();\n    const subscribedGroupsName = getSubscribedGroups();\n    const group = await server.getGroupByName(this.props.match.params.name);\n    if (group === null) {\n      this.setState({\n        loading: false,\n        group: null,\n        groups,\n        subscribedGroupsName,\n      });\n      return;\n    }\n    const threads = await group.threads();\n    const readArticles = getReadArticles(group.name);\n\n    this.setState({loading: false, group, groups, subscribedGroupsName, threads, readArticles, filteredThreads: threads});\n  }\n\n  render() {\n    const nntpUrl = localStorage.getItem(\"nntpUrl\");\n    const nntpPortStr = localStorage.getItem(\"nntpPort\");\n    if (!nntpUrl || !nntpPortStr) {\n      return <Redirect to={\"/setServer\"}/>;\n    }\n\n    const {match} = this.props;\n    const {group, loading, threads, filteredThreads} = this.state;\n\n    const filter = (text: string) => {\n      const filteredThreads = threads.filter(\n        (article) => article.subject.toLowerCase().includes(text) || article.author.name.toLowerCase().includes(text)\n      );\n      this.setState({filteredThreads})\n    };\n\n    const articleListData = group === null\n      ? []\n      : filteredThreads.map(article => ({\n        bold: !this.state.readArticles.find(a => a === article.id),\n        class: this.state.activeArticle === article.id ? \"active-article\" : \"\",\n        url: `${match.url}/${article.number}`,\n        onPress: () => {\n          addReadArticle(group.name, article.id);\n          this.setState({readArticles: this.state.readArticles.concat(article.id), activeArticle: article.id})\n        },\n        referenceObject: article\n      }));\n\n    const buttons: Button[] = [\n      {\n        name: \"Write\",\n        icon: \"pencil-alt\",\n        url: group === null ? \"\" : `/post/${group.name}`\n      }\n    ];\n\n\n    const groupName = group === null ? match.params.name : group.name;\n    const headerWithSearch = <Header name={groupName} searchBar={{filter}} url={match.url} buttons={buttons}/>;\n    const headerWithoutSearch = <Header name={groupName} url={match.url} buttons={buttons}/>;\n\n    const isGroupSubscribed = (groupName: string) => {\n        return this.state.subscribedGroupsName.includes(groupName);\n    };\n\n    const getGroups = (isSubscription?: boolean): Group[] => {\n        return this.state.groups.filter(curgroup => isGroupSubscribed(curgroup.name));\n    };\n\n    return (\n      <div className=\"app-grid\">\n        <Helmet>\n          <title>newsR - {groupName}</title>\n        </Helmet>\n        <Switch>\n          <Route path={`${match.path}/:number`}>\n            <Media queries={{small: SMALL_SCREEN_QUERY, large: LARGE_SCREEN_QUERY}}>\n              {matches => (\n                <Fragment>\n                  {matches.small && headerWithoutSearch}\n                  {matches.large && headerWithSearch}\n                </Fragment>\n              )}\n            </Media>\n          </Route>\n          <Route path={`${match.path}`}>\n            {headerWithSearch}\n          </Route>\n        </Switch>\n        <div className=\"app-grid-body\">\n          {\n            loading\n              ? <Loading/>\n              : (group === null ? \"Group not found!\" :\n              <Media query={SMALL_SCREEN_QUERY}>\n                {\n                  screenIsSmall => screenIsSmall\n                    ?\n                    <Switch>\n                      <Route path={`${match.path}/:number`} render={props =>\n                        <ThreadDetail {...props} group={group}\n                                      article={threads.find(thread => thread.number === parseInt(props.match.params.number))\n                                      || null}/>\n                      }/>\n                      <Route path={`${match.path}`}>\n                        <Table onPressSort={(sortColumn, ascending) => this.setState({sortColumn: sortColumn, ascending: ascending})} sortColumn={this.state.sortColumn} ascending={this.state.ascending} data={articleListData} columns={[new TableColumn(\"Subject\", 0, \"subject\"), new TableColumn(\"Author\", 1, \"author\"), new TableColumn(\"Date\", 2, \"date\")]} urlColumn=\"url\"/>\n                      </Route>\n                    </Switch>\n                    :\n                    <SidebarContent\n                      sidebar={this.state.subscribedGroupsName.length === 0\n                                                 ? <div className=\"no-thread\">\n                                                   <div className=\"no-thread-text\">\n                                                     Welcome to newsR - <Link to={`/groups-manage`}>Subscribe to a newsgroup</Link> to get started!\n                                                   </div>\n                                                 </div>\n                                                 : <List data={getGroups(true).map((curgroup) => ({\n                                                   title: curgroup.name,\n                                                   subtitle: curgroup.description,\n                                                   url: `/groups/${curgroup.name}`,\n                                                   bold: group.name === curgroup.name,\n                                                   class: group.name === curgroup.name ? \"active-group\" : \"\",\n                                                    onPress: () => {\n                                                          this.componentDidMount();\n                                                    }\n                                                 }))}/>}\n\n                      content1={<Table onPressSort={(sortColumn, ascending) => this.setState({sortColumn: sortColumn, ascending: ascending})} sortColumn={this.state.sortColumn} ascending={this.state.ascending} data={articleListData} columns={[new TableColumn(\"Subject\", 0, \"subject\"), new TableColumn(\"Author\", 1, \"author\"), new TableColumn(\"Date\", 2, \"date\")]} urlColumn=\"url\"/>}\n                      content2={\n                        <Switch>\n                          <Route path={`${match.path}/:number`} render={props =>\n                            <ThreadDetail {...props} group={group}\n                                          article={threads.find(thread => thread.number === parseInt(props.match.params.number))\n                                          || null}/>\n                          }/>\n                          <NoThread url={match.path} groupName={group.name}/>\n                        </Switch>\n                      }/>\n                    }\n              </Media>)\n          }\n        </div>\n        <Footer/>\n      </div>\n    )\n  }\n}\n\nfunction NoThread(props: {\n  url: string\n  groupName: string\n}) {\n  return (\n    <Route path={props.url}>\n      <div className=\"no-thread\">\n        <div className=\"no-thread-text\">\n          {\"Welcome to \" + props.groupName}\n        </div>\n        <div className=\"no-thread-text\">\n          Please select a thread or <Link to={`/post/${props.groupName}`}>write</Link> a new post!\n        </div>\n      </div>\n    </Route>\n  )\n}\n\n","import React, {ChangeEvent, FormEvent} from \"react\";\nimport {Server} from \"../server/Server\";\nimport {Author} from \"../author/Author\";\nimport {Redirect, RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {Group} from \"../group/Group\";\nimport {Article, ArticleInterface} from \"../article/Article\";\nimport {Loading} from \"../template/Loading\";\nimport {Helmet} from \"react-helmet\";\nimport {Header} from \"../template/Header\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {Content} from \"../article/Content\";\n\ninterface State {\n  loading: boolean;\n  sending: boolean;\n  done: boolean;\n  group: Group | null;\n  article: Article | null;\n  author: string;\n  subject: string;\n  content: string;\n  email: string;\n}\n\nexport interface PostRouteParams {\n  name: string;\n  number: string;\n}\n\nclass _Post extends React.Component<RouteComponentProps<PostRouteParams>, {}> {\n\n  public static replyStr = 'Re: ';\n\n  state: Readonly<State> = {\n    loading: true,\n    sending: false,\n    done: false,\n    group: null,\n    article: null,\n    author: '',\n    subject: '',\n    content: '',\n    email: ''\n  };\n\n  async componentDidMount(): Promise<void> {\n    const nntpUrl = localStorage.getItem(\"nntpUrl\");\n    const nntpPortStr = localStorage.getItem(\"nntpPort\");\n    if (!nntpUrl || !nntpPortStr) {\n      return;\n    }\n    const {match} = this.props;\n    const server = await Server.instance();\n    const group = await server.getGroupByName(match.params.name);\n    this.setState({\n      author: localStorage.getItem('authorName') || \"\",\n      email: localStorage.getItem('authorEmail') || \"\"\n    });\n    if (!group) {\n      this.setState({\n        group: null,\n        article: null,\n        loading: false\n      });\n      return;\n    }\n    if (!match.params.number) {\n      this.setState({\n        group,\n        article: null,\n        loading: false\n      });\n      return;\n    }\n    const article = await group.article(parseInt(match.params.number));\n    if (!article) {\n      this.setState({\n        group: null,\n        article: null,\n        loading: false\n      });\n      return;\n    }\n    const subject = article.subject.startsWith(_Post.replyStr) ? article.subject : _Post.replyStr + article.subject;\n    const contents = await article.contents();\n    const content = this.parseQuote(contents.text, article);\n    this.setState({\n      group,\n      article,\n      subject,\n      content,\n      loading: false\n    });\n  }\n\n  private parseQuote(contents: Content[], article: ArticleInterface): string {\n    let quoteString = `On ${article.date.format(\"YYYY-MM-DD HH:mm\")}, ${article.author.name} wrote:\\n`;\n    contents.forEach(function (content) {\n      quoteString += (\">\".repeat(content.citationLevel+1) + \" \" + content.text + \"\\n\")\n    });\n    return quoteString;\n  }\n\n  async timeout(delay: number) {\n    return new Promise( res => setTimeout(res, delay) );\n  }\n\n  async send(event: FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n    this.setState({\n      sending: true\n    });\n    const {group, article, subject, author, email, content} = this.state;\n    if (!group) {\n      console.error('Error: cannot send, group not found.');\n      return;\n    }\n    const authorClass = new Author(author, email);\n\n    localStorage.setItem('authorName', author);\n    localStorage.setItem('authorEmail', email);\n    if (article) {\n      await article.postFollowup(authorClass, subject, [content]);\n    } else {\n      await group?.post(authorClass, subject, [content]);\n    }\n    this.setState({\n      sending: false,\n      done: true\n    });\n    await this.timeout(1000)\n    this.props.history.goBack();\n  }\n\n  render() {\n    const nntpUrl = localStorage.getItem(\"nntpUrl\");\n    const nntpPortStr = localStorage.getItem(\"nntpPort\");\n    if (!nntpUrl || !nntpPortStr) {\n      return <Redirect to={\"/setServer\"}/>;\n    }\n    const {match} = this.props;\n    const {group, article, loading, subject, author, email, content, sending, done} = this.state;\n\n    let headerText = group === null ? match.params.name : group.name;\n    let headerSubtitle = \"\";\n    if (article) {\n      headerText += ` ${_Post.replyStr + article.subject}`;\n      headerSubtitle = article.date.format(\"YYYY-MM-DD HH:mm\") + \" by \" + article.author.name;\n    }\n    // todo: form validation, author\n    // todo: fix reload bug\n    return (\n      <div className=\"app-grid\">\n        <Helmet>\n          <title>newsR - {headerText}</title>\n        </Helmet>\n        <Header name={headerText} subtitle={headerSubtitle} url={match.url}/>\n        <div className=\"app-grid-body\">\n          {\n            loading ? <Loading/> : (group === null ? \"Group not found\" :\n              <form className=\"post-article\" acceptCharset=\"UTF-8\" onSubmit={(event: FormEvent<HTMLFormElement>) => this.send(event)}>\n                <div className=\"input-group\">\n                  <input\n                    required\n                    name=\"author\"\n                    type=\"text\"\n                    placeholder=\"Name\"\n                    value={author}\n                    onChange={(event: ChangeEvent<HTMLInputElement>) => {\n                      this.setState({\n                        author: event.currentTarget.value\n                      })\n                    }}\n                  />\n                  <input\n                    required\n                    name=\"email\"\n                    type=\"email\"\n                    placeholder=\"email@provider.tld\"\n                    value={email}\n                    onChange={(event: ChangeEvent<HTMLInputElement>) => {\n                      this.setState({\n                        email: event.currentTarget.value\n                      })\n                    }}\n                  />\n                </div>\n                <div className=\"input-group\">\n                  <input\n                    required\n                    name=\"subject\"\n                    type=\"text\"\n                    placeholder=\"Subject: …\"\n                    value={subject}\n                    onChange={(event: ChangeEvent<HTMLInputElement>) => {\n                      this.setState({\n                        subject: event.currentTarget.value\n                      })\n                    }}\n                  />\n                </div>\n                {article && (\n                  <div className=\"input-group\">\n                    <input\n                      name=\"followup to\"\n                      type=\"hidden\"\n                      value={article?.references.concat(article.id).join(' ')}\n                      readOnly\n                    />\n                  </div>\n                )}\n                <div className=\"input-group\">\n              <textarea\n                required\n                value={content}\n                onChange={(event: ChangeEvent<HTMLTextAreaElement>) => {\n                  this.setState({\n                    content: event.currentTarget.value\n                  })\n                }}\n              />\n                </div>\n                <div className=\"input-group\">\n                  <button className=\"submit\" type=\"submit\" disabled={sending || done}>\n                    {\n                      sending ? <FontAwesomeIcon icon=\"spinner\" spin />\n                      : (done ? \"Sent!\" : \"Send\")\n                    }\n                  </button>\n                  <button className=\"back\" type=\"reset\" onClick={() => this.props.history.goBack()}>Go back</button>\n                </div>\n              </form>)\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const Post = withRouter(_Post);\n","import React, {useEffect, useState} from \"react\";\nimport {Server} from \"../server/Server\";\nimport {List} from \"../template/List\";\nimport {Loading} from \"../template/Loading\";\nimport {Group} from \"../group/Group\";\nimport {Helmet} from \"react-helmet\"\nimport {Button, Header} from \"../template/Header\";\nimport {Footer} from \"../template/Footer\";\nimport {IconProp} from \"@fortawesome/fontawesome-svg-core\";\nimport {getSubscribedGroups, subscribeGroup, unsubscribeGroup} from \"../localStorage/localStorage\";\nimport {Link, Route, Switch, Redirect} from \"react-router-dom\";\n\ninterface StartPageState {\n  groups: Group[],\n  filterText: string,\n  subscribedGroupsName: string[]\n}\n\nexport function StartPage() {\n  const nntpUrl = localStorage.getItem(\"nntpUrl\");\n  const nntpPortStr = localStorage.getItem(\"nntpPort\");\n  if (!nntpUrl || !nntpPortStr) {\n    return <Redirect to={\"/setServer\"}/>;\n  }\n  else{\n    return Start();\n  }\n}\n\nfunction Start() {\n  const [state, setState] = useState<StartPageState>({\n    groups: [],\n    filterText: \"\",\n    subscribedGroupsName: []\n  });\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async function fetchData() {\n      setLoading(true);\n\n      const server = await Server.instance();\n      const groups = await server.groups();\n      const subscribedGroupsName = getSubscribedGroups();\n      setState({\n        ...state,\n        groups,\n        subscribedGroupsName\n      });\n\n      setLoading(false)\n    }\n\n    fetchData();\n  },\n    // doesn't work with [state]? \n    // eslint-disable-next-line\n    []);\n\n  const filter = (filterText: string) => {\n    setState({...state, filterText})\n  };\n\n  const changeSubscriptionState = (group: { title: string }) => {\n    if (isGroupSubscribed(group.title)) {\n      unsubscribeGroup(group.title);\n    } else {\n      subscribeGroup(group.title);\n    }\n    const subscribedGroupsName = getSubscribedGroups();\n    setState({...state, subscribedGroupsName})\n  };\n\n  const groupIcon = (group: Group): IconProp => {\n    if (isGroupSubscribed(group.name))\n      return \"check-square\" as IconProp;\n\n    return \"square\" as IconProp\n  };\n\n  const serverButton: Button = {\n    name: \"Settings\",\n    icon: \"tools\",\n    url: \"/setServer\"\n  };\n\n  const manageButton: Button = {\n    name: \"Manage groups\",\n    icon: \"cog\",\n    url: \"/groups-manage\"\n  };\n\n  const subscriptionButton: Button = {\n    name: \"Subscriptions\",\n    icon: \"home\",\n    url: \"/\"\n  };\n\n  const allGroupsButton: Button = {\n    name: \"All Groups\",\n    icon: \"list\",\n    url: \"/groups\"\n  };\n\n  const groupButtons: Button[] = [serverButton, manageButton, subscriptionButton];\n\n  const subscriptionButtons: Button[] = [serverButton, manageButton, allGroupsButton];\n\n  const manageButtons: Button[] = [serverButton, allGroupsButton, subscriptionButton];\n\n  const isGroupFiltered = (group: Group) => {\n    const {filterText} = state;\n    if (filterText === \"\") {\n      return true;\n    }\n    return (group.name.toLowerCase().includes(filterText) || group.description.toLowerCase().includes(filterText));\n  };\n\n  const isGroupSubscribed = (groupName: string) => {\n    return state.subscribedGroupsName.includes(groupName);\n  };\n\n  const getGroups = (isSubscription?: boolean): Group[] => {\n    return state.groups.filter(group => isGroupFiltered(group) && (isSubscription !== true || isGroupSubscribed(group.name)));\n  };\n\n  const serverUrl = localStorage.getItem(\"nntpUrl\");\n  const nntpUrl = serverUrl !== null ? serverUrl : '';\n\n  return (\n    <div className=\"app-grid\">\n      <Helmet>\n        <title>newsR - {nntpUrl}</title>\n      </Helmet>\n      <Switch>\n        <Route path=\"/groups\">\n          <Header name={nntpUrl} searchBar={{filter}} buttons={groupButtons}/>\n        </Route>\n        <Route path=\"/groups-manage\">\n          <Header name={nntpUrl} searchBar={{filter}} buttons={manageButtons}/>\n        </Route>\n        <Route path=\"/\">\n          <Header name={nntpUrl} searchBar={{filter}} buttons={subscriptionButtons}/>\n        </Route>\n      </Switch>\n      <div className=\"app-grid-body\">\n        {\n          loading ? <Loading/> :\n            <Switch>\n              <Route path=\"/setServer\">\n              </Route>\n              <Route path=\"/groups\">\n                <List data={getGroups().map((group) => ({\n                  title: group.name,\n                  subtitle: group.description,\n                  url: `/groups/${group.name}`\n                }))}/>\n              </Route>\n              <Route path=\"/groups-manage\">\n                <List data={getGroups().map((group) => ({\n                  title: group.name,\n                  subtitle: group.description,\n                  url: \"\",\n                  onPress: changeSubscriptionState,\n                  icon: groupIcon(group)\n                }))}/>\n              </Route>\n              <Route path=\"/\">\n                {state.subscribedGroupsName.length === 0\n                  ? <div className=\"no-thread\">\n                    <div className=\"no-thread-text\">\n                      Welcome to newsR - <Link to={`/groups-manage`}>Subscribe to a newsgroup</Link> to get started!\n                    </div>\n                  </div>\n                  : <List data={getGroups(true).map((group) => ({\n                    title: group.name,\n                    subtitle: group.description,\n                    url: `/groups/${group.name}`\n                  }))}/>}\n              </Route>\n            </Switch>\n        }\n      </div>\n      <Footer/>\n    </div>\n  );\n}\n\n\n\n\n","import React, {ChangeEvent, FormEvent} from \"react\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {Loading} from \"../template/Loading\";\nimport {Helmet} from \"react-helmet\";\nimport {Header} from \"../template/Header\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {Footer} from \"../template/Footer\";\nimport {Server} from \"../server/Server\";\n\ninterface ServerSelectState {\n  loading: boolean;\n  setting: boolean;\n  done: boolean;\n  url: string,\n  port: string,\n  groupPrefix: string,\n}\n\n//TODO: validate input\n\nclass _ServerSelect extends React.Component<RouteComponentProps, {}> {\n\n  state: Readonly<ServerSelectState> = {\n    loading: true,\n    setting: false,\n    done: false,\n    url: \"\",\n    port: \"\",\n    groupPrefix: \"\",\n  };\n\n  async componentDidMount(): Promise<void> {\n\n    this.setState({\n      url: localStorage.getItem('nntpUrl') || \"news.tugraz.at\",\n      port: localStorage.getItem('nntpPort') || \"119\",\n      groupPrefix: localStorage.getItem('nntpGroupPrefix') || \"tu-graz*\",\n      loading: false\n    });\n  }\n\n  async setServer(event: FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n    this.setState({\n      setting: true\n    });\n    const {url, port, groupPrefix} = this.state;\n    if (!url || !port || !groupPrefix) {\n      console.error('Error: cannot set, please fill all fields.');\n      return;\n    }\n    if(url !== localStorage.getItem('nntpUrl')){\n      localStorage.clear();\n    }\n    localStorage.setItem('nntpUrl', url);\n    localStorage.setItem('nntpPort', port);\n    localStorage.setItem('nntpGroupPrefix', groupPrefix);\n    await Server.resetServer();\n\n    this.setState({\n      setting: false,\n      done: true\n    });\n    console.log(this.props.history)\n    this.props.history.push(\"/\")\n  }\n\n  render() {\n    const {loading, setting, done, url, port, groupPrefix} = this.state;\n    return (\n      <div className=\"app-grid\">\n        <Helmet>\n          <title>newsR</title>\n        </Helmet>\n        <Header name={\"\"}/>\n        <div className=\"app-grid-body\">\n          {\n            loading ? <Loading/> :\n              <form className=\"post-article\" onSubmit={(event: FormEvent<HTMLFormElement>) => this.setServer(event)}>\n                <div className=\"input-group\">\n                  <input\n                    required\n                    name=\"url\"\n                    type=\"text\"\n                    title=\"Server URL like news.tugraz.at\"\n                    placeholder=\"Server URL like news.tugraz.at\"\n                    value={url}\n                    onChange={(event: ChangeEvent<HTMLInputElement>) => {\n                      this.setState({\n                        url: event.currentTarget.value\n                      })\n                    }}\n                  />\n                </div>\n                <div className=\"input-group\">\n                  <input\n                    required\n                    name=\"port\"\n                    type=\"text\"\n                    title=\"Server Port like 119\"\n                    placeholder=\"Server Port like 119\"\n                    value={port}\n                    onChange={(event: ChangeEvent<HTMLInputElement>) => {\n                      this.setState({\n                        port: event.currentTarget.value\n                      })\n                    }}\n                  />\n                </div>\n                <div className=\"input-group\">\n                  <input\n                    required\n                    name=\"prefix\"\n                    type=\"text\"\n                    title=\"Group Prefix like tu-graz*\"\n                    placeholder=\"Group Prefix like tu-graz*\"\n                    value={groupPrefix}\n                    onChange={(event: ChangeEvent<HTMLInputElement>) => {\n                      this.setState({\n                        groupPrefix: event.currentTarget.value\n                      })\n                    }}\n                  />\n                </div>\n                <div className=\"input-group\">\n                  <button className=\"submit\" type=\"submit\" disabled={setting}>\n                    {\n                      setting ? <FontAwesomeIcon icon=\"spinner\" spin />\n                        : (done ? \"Set!\" : \"Set\")\n                    }\n                  </button>\n                </div>\n              </form>\n          }\n        </div>\n        <Footer/>\n      </div>\n    );\n  }\n}\n\nexport const ServerSelect = withRouter(_ServerSelect);","import React, {ReactNode} from 'react';\nimport './App.scss';\nimport {GroupDetail} from \"./group/GroupDetail\";\nimport {Route, Switch} from \"react-router-dom\"\nimport {Post} from \"./post/Post\";\nimport {StartPage} from \"./startPage/StartPage\";\nimport {ServerSelect} from \"./serverSelect/ServerSelect\";\n\n\nexport default class App extends React.Component {\n  render(): ReactNode {\n    return (\n      <div className=\"app\">\n        <Switch>\n          <Route path=\"/groups/:name\" component={GroupDetail}/>\n          <Route path=\"/post/:name/:number?\" component={Post}/>\n          <Route path=\"/setServer\" component={ServerSelect}/>\n          <Route path=\"/\" component={StartPage}/>\n        </Switch>\n      </div>\n    );\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n    // websocke interception not possible with serviceWorker: https://stackoverflow.com/a/39602235/2306363\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'}\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport {HashRouter} from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\nimport {library} from '@fortawesome/fontawesome-svg-core'\nimport {\n  faChevronDown,\n  faChevronRight,\n  faCog,\n  faHandPointRight,\n  faHome,\n  faList,\n  faPencilAlt,\n  faSpinner,\n  faCheckSquare,\n  faSquare,\n  faTools,\n  faEnvelope\n} from '@fortawesome/free-solid-svg-icons'\nimport {faGithub} from '@fortawesome/free-brands-svg-icons'\n\nlibrary.add(faChevronDown, faChevronRight, faHandPointRight, faHome, faSpinner, faPencilAlt, faCog, faList,\n    faGithub, faCheckSquare, faSquare, faTools, faEnvelope);\nReactDOM.render(\n  <HashRouter basename={process.env.REACT_APP_BASE_URL}>\n    <App/>\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/logo.8e7cbbb2.svg\";"],"sourceRoot":""}